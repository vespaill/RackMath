{"version":3,"sources":["icons/fire.png","components/icons/barbell.jsx","components/icons/plate.jsx","components/icons/info.jsx","components/icons/fire.jsx","components/navBar.jsx","components/invPlateGroup.jsx","components/common/header.jsx","components/inventory.jsx","components/common/notFound.jsx","components/loaderForm.jsx","components/loadDiagram.jsx","utils/limitPlateHeight.js","components/loadValue.jsx","components/loader.jsx","components/icons/cog.jsx","components/setsCalcForm.jsx","components/setContainer.jsx","components/common/popup.jsx","components/setsCalculator.jsx","components/about.jsx","utils/plates.js","App.js","utils/rampUps.js","utils/calcBgColor.js","serviceWorker.js","index.js"],"names":["module","exports","Barbell","className","Icon","Fire","src","fireIcon","alt","NavBar","navLinks","url","pathname","from","component","commonProps","activeClassName","replace","map","index","key","to","InvPlateGroup","props","value","quantity","bgColor","onClick","Header","children","my","mx","textJustify","React","Children","count","myC","mxC","Row","child","Fragment","Inventory","unit","barbell","availPlates","onUnitClick","onPlateGroupClick","onClear","e","style","minWidth","plate","color","plateGroupProps","Col","xs","NotFound","LoaderForm","Form","onSubmit","InputGroup","FormControl","type","inputMode","pattern","name","placeholder","aria-label","min","step","onFocus","currentTarget","select","Append","Text","Button","variant","btnText","LoadDiagram","barbellWeight","calcdPlates","opacity","shortid","generate","left","animationDelay","height","min_px","max_px","LoadValue","prevCalcdLoad","calcdLoad","Loader","resetPrevLoad","formProps","diagramProps","loadValProps","useLocation","useEffect","Cog","width","viewBox","fill","xmlns","fillRule","d","SetsCalcForm","onSettings","workWeight","formControlProps","required","maxWeight","max","defaultValue","SetContainer","percentage","weight","numReps","isWorkingSet","workSetClass","Math","round","Popup","show","onClose","header","SetsCalculator","workNumReps","warmUpSets","percentages","contProps","onLoad","length","workWeightContProps","useState","showPopup","setShowPopup","togglePopup","href","target","set","additionalProps","on","togglePercentage","About","textAlign","findAllValidCombs","targetLoad","barLoad","plateObjs","cpyPlateObjs","combinations","subsets","calcSubsets","subsetCpy","plateGroup","isValidComb","success","roundOff","push","shift","coyPlateObjs","lightestPlate","reduce","prev","cur","i","nextLoad","dif","abs","findBestComb","minRoundOff","combsMinRoundOff","comb","filter","minNumPlates","prevHeaviestPlate","curHeaviestPlate","acc","bitSet","subset","j","App","state","lbs","kg","prevWarmUpSets","handleUnitClick","setState","classList","add","remove","localStorage","handlePlateGroupClick","findIndex","element","quant","handleLoadSubmit","preventDefault","firstElementChild","blur","handleLoad","loadInput","load","modifier","input","avlPltsOneSide","maxLoad","warn","amount","up","bestCombination","roundOffAmount","calculatePlates","toast","error","handleWorkSetSubmit","querySelectorAll","forEach","elem","numRepsInput","updateWarmUpSets","lightestPlateAvail","remainder","dividend","roundToNearestStepHelper","roundToNearestStep","workingNumSets","calcRampUpReps","handlePlateGroupsClear","handleTogglePercentage","defaultAvailPlates","get","this","loaderProps","invProps","setsCalcProps","toastProps","autoClose","hideProgressBar","pauseOnFocusLoss","draggable","pauseOnHover","newestOnTop","paddingBottom","path","render","exact","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b5762c7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fire.fe489d1d.png\";","import React from 'react';\r\nimport '../../css/icons/barbell.css';\r\n\r\nconst Barbell = () => {\r\n  return (\r\n    <div className=\"barbell-icon\">\r\n      <div className=\"barbell\">\r\n        <div className=\"barbell__shaft\"></div>\r\n        <div className=\"plate-group--1\">\r\n          <div className=\"plate-group__plate--small\"></div>\r\n          <div className=\"plate-group__plate--med\"></div>\r\n          <div className=\"plate-group__plate--large\"></div>\r\n        </div>\r\n        <div className=\"plate-group--2\">\r\n          <div className=\"plate-group__plate--small\"></div>\r\n          <div className=\"plate-group__plate--med\"></div>\r\n          <div className=\"plate-group__plate--large\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Barbell;\r\n","import React from 'react';\r\nimport '../../css/icons/plate.css';\r\n\r\nconst Barbell = () => {\r\n  return (\r\n    <div className=\"plate-icon\">\r\n      <div className=\"plate__outline\"></div>\r\n      <div className=\"plate__circle\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Barbell;\r\n","import React from 'react';\r\nimport '../../css/icons/info.css';\r\n\r\nconst Icon = () => (\r\n  <div className=\"info-icon\">\r\n    <div>i</div>\r\n  </div>\r\n);\r\n\r\nexport default Icon;\r\n","import React from 'react';\r\nimport fireIcon from '../../icons/fire.png'\r\nimport '../../css/icons/fire.css'\r\n\r\nconst Fire = () => {\r\n  return <img className=\"fire-icon\" src={fireIcon} alt=\"fire\" />;\r\n};\r\n\r\nexport default Fire;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../css/navBar.css';\r\nimport Barbell from './icons/barbell';\r\nimport Plate from './icons/plate';\r\nimport Info from './icons/info';\r\nimport Fire from './icons/fire';\r\n\r\nconst NavBar = () => {\r\n  const navLinks = [\r\n    { url: { pathname: '/home', from: 'navBar' }, component: <Barbell /> },\r\n    { url: '/warmup', component: <Fire /> },\r\n    { url: '/inventory', component: <Plate /> },\r\n    { url: '/about', component: <Info /> }\r\n  ];\r\n  const commonProps = { className: 'nav-item', activeClassName: 'active-class', replace: true };\r\n  return (\r\n    <nav className=\"bg-red navbar fixed-bottom d-flex justify-content-between\">\r\n      {navLinks.map(({ url, component }, index) => (\r\n        <NavLink key={index} {...commonProps} to={url}>\r\n          {component}\r\n        </NavLink>\r\n      ))}\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\n\r\nconst InvPlateGroup = props => {\r\n  const { value, quantity, bgColor, onClick } = props;\r\n\r\n  return (\r\n    <div className=\"plate-group text-center\">\r\n      <button onClick={() => onClick(value)} className={'plate-group__plate' + (quantity ? ' bg-' + bgColor : '')}>\r\n        <span className=\"center-vertically\">{value}</span>\r\n      </button>\r\n      {quantity > 0 && (\r\n        <div className=\"plate-group__quantity\">\r\n          <span className=\"center-vertically unselectable\">{quantity}</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvPlateGroup;\r\n","import React from 'react';\r\nimport { Row } from 'react-bootstrap';\r\n\r\nconst Header = props => {\r\n  const { children, my, mx } = props;\r\n  const textJustify = React.Children.count(children) > 1 ? 'between' : 'center';\r\n  const myC = 'my-' + (my ? my : '1');\r\n  const mxC = 'mx-' + (mx ? mx : '3');\r\n\r\n  return (\r\n    <Row className={`${myC} ${mxC} d-flex justify-content-${textJustify}`}>\r\n      {React.Children.map(children, child => (\r\n        <React.Fragment>{child}</React.Fragment>\r\n      ))}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport InvPlateGroup from './invPlateGroup';\r\nimport Header from './common/header';\r\nimport '../css/inventory.css';\r\n\r\nconst Inventory = props => {\r\n  const { unit, barbell, availPlates, onUnitClick, onPlateGroupClick, onClear } = props;\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <h1>Unit</h1>\r\n        <button className=\"btn-unit\" onClick={e => onUnitClick(e)}>\r\n          {unit}\r\n        </button>\r\n      </Header>\r\n      <Header>\r\n        <h1>Barbell</h1>\r\n        <h1>{barbell[unit]}</h1>\r\n      </Header>\r\n      <Header>\r\n        <h1>Available plates</h1>\r\n      </Header>\r\n      <Row style={{ minWidth: '300px' }}>\r\n        {availPlates[unit].map((plate, index) => {\r\n          const { value, color, quantity } = plate;\r\n          const plateGroupProps = { onClick: onPlateGroupClick, value, quantity, bgColor: color };\r\n          return (\r\n            <Col key={index} xs={4}>\r\n              <InvPlateGroup {...plateGroupProps} />\r\n            </Col>\r\n          );\r\n        })}\r\n        <Col xs={4}>\r\n          <div className=\"btn-clear-container text-center\">\r\n            <button className=\"btn-clear\" onClick={() => onClear()}>\r\n              <span className=\"center-vertically\">clear</span>\r\n            </button>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Inventory;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n  return <h1>Not Found</h1>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport { Form, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../css/loadForm.css';\r\n\r\nconst LoaderForm = props => {\r\n  return (\r\n    <Form onSubmit={e => props.onSubmit(e)}>\r\n      <InputGroup>\r\n        <FormControl\r\n          className=\"text-right\"\r\n          type=\"number\"\r\n          inputMode=\"numeric\"\r\n          pattern=\"[0-9]*\"\r\n          name=\"loadInput\"\r\n          placeholder={props.placeholder}\r\n          aria-label=\"weight\"\r\n          min=\"0\"\r\n          step=\"0.5\"\r\n          onFocus={e => { e.currentTarget.select(); }}\r\n        />\r\n        <InputGroup.Append>\r\n          <InputGroup.Text className=\"weight-input__text\">\r\n            {props.unit}\r\n          </InputGroup.Text>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n      <div>\r\n        <Button className=\"mx-auto d-block\" variant=\"dark\" type=\"submit\">\r\n          {props.btnText}\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default LoaderForm;\r\n","import React from 'react';\r\nimport { limitPlateHeight } from '../utils/limitPlateHeight';\r\nimport shortid from 'shortid';\r\nimport '../css/loadDiagram.css';\r\n\r\nconst LoadDiagram = props => {\r\n  const { barbellWeight, calcdPlates } = props;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"load\">\r\n        <div className=\"load__barbell--shaft\">\r\n          <div>{barbellWeight}</div>\r\n        </div>\r\n        <div className=\"load__barbell--sleeve-threshold\" />\r\n        <div className=\"load__plate-group\">\r\n          <div style={{ opacity: '0px' }} className=\"plate-container\" />\r\n          {calcdPlates.map((plate, index) => (\r\n            <div\r\n              key={shortid.generate()}\r\n              className=\"plate-container animate-slide-in-and-bounce\"\r\n              style={{ left: `${index * 32 + 32}px`, animationDelay: `${index*0.1}s` }}\r\n            >\r\n              <div\r\n                className={`plate-container__plate center-vertically bg-${plate.color}`}\r\n                style={{ height: `${limitPlateHeight(plate.value * 7, 45, 315)}px` }}\r\n              />\r\n              <div className=\"plate-container__plate--text center-vertically\">{plate.value}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoadDiagram;\r\n","export const limitPlateHeight = (height, min_px, max_px) => {\r\n  if (height >= max_px) return max_px;\r\n  if (height <= min_px) return min_px;\r\n  return height;\r\n};","import React from 'react';\r\nimport shortid from 'shortid';\r\nimport '../css/loadValue.css';\r\n\r\nconst LoadValue = props => {\r\n  const { prevCalcdLoad, calcdLoad, unit } = props;\r\n  return (\r\n    <div className=\"load-value center-vertically\">\r\n      {prevCalcdLoad > -1 && (\r\n        <div key={shortid.generate()} className=\"load-value__prev badge badge-success animate-leave\">\r\n          {`${prevCalcdLoad} ${unit}`}\r\n        </div>\r\n      )}\r\n      {calcdLoad > -1 && (\r\n        <div key={shortid.generate()} className=\"load-value__cur badge badge-success animate-enter\">\r\n          {`${calcdLoad} ${unit}`}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadValue;\r\n","import React, { useEffect } from 'react';\r\nimport { useLocation, Redirect } from 'react-router-dom';\r\nimport Header from './common/header';\r\nimport LoaderForm from './loaderForm';\r\nimport LoadDiagram from './loadDiagram';\r\nimport LoadValue from './loadValue';\r\n\r\nconst Loader = props => {\r\n  const { unit, barbellWeight, calcdPlates, calcdLoad, prevCalcdLoad, onSubmit, resetPrevLoad } = props;\r\n  const formProps = { unit, onSubmit };\r\n  const diagramProps = { barbellWeight, calcdPlates };\r\n  const loadValProps = { unit, calcdLoad, prevCalcdLoad };\r\n  const { from } = useLocation();\r\n\r\n  /* useEffect is similar to componentDidMount and componentDidUpdate. If we\r\n   * came from navBar, set prevLoad to -1 to prevent the prevLoad slide-out\r\n   * animation from playing out. In this case, we want only the curLoad slide-in\r\n   * animation to play out. */\r\n  useEffect(() => {\r\n    if (from === 'navBar') resetPrevLoad();\r\n  }, [from, resetPrevLoad]);\r\n\r\n  /* If we came from navBar, redirect to this component again. Doing so will\r\n   * give the resetPrevLoad() callback plenty of time to run, and that will\r\n   * prevent us the displeasure of seeing the prevLoad element pop out of view.\r\n   * */\r\n  return from === 'navBar' ? (\r\n    <Redirect to=\"/home\" />\r\n  ) : (\r\n    <>\r\n      <Header>\r\n        <h1>Barbell Loader</h1>\r\n      </Header>\r\n      <LoaderForm {...formProps} placeholder=\"Enter Weight\" btnText=\"Load\" />\r\n      <LoadDiagram {...diagramProps} />\r\n      <LoadValue {...loadValProps} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\n\r\nconst Cog = () => (\r\n  <svg\r\n    width=\"25.25\"\r\n    height=\"25.25\"\r\n    viewBox=\"0 0 16 16\"\r\n    className=\"bi bi-gear-fill\"\r\n    fill=\"currentColor\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <path\r\n      fillRule=\"evenodd\"\r\n      d=\"M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 0 0-5.86 2.929 2.929 0 0 0 0 5.858z\"\r\n    />\r\n  </svg>\r\n);\r\nexport default Cog;\r\n","import React from 'react';\r\nimport { Form, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport Cog from './icons/cog';\r\nimport '../css/loadForm.css';\r\n\r\nconst SetsCalcForm = props => {\r\n  const { unit, onSubmit, btnText, onSettings, workWeight } = props;\r\n  const formControlProps = {\r\n    required: true,\r\n    type: 'number',\r\n    inputMode: 'numeric',\r\n    pattern: '[0-9]*',\r\n    min: '0',\r\n    onFocus: e => { e.currentTarget.select(); }\r\n  };\r\n  const maxWeight = unit === 'kg' ? 2840 : 7000;\r\n\r\n  return (\r\n    <Form onSubmit={e => onSubmit(e)}>\r\n      <InputGroup>\r\n        <FormControl name=\"loadInput\" placeholder={workWeight > 0? workWeight : \"weight\"} step=\"0.5\" max={maxWeight} {...formControlProps} />\r\n        <InputGroup.Append>\r\n          <InputGroup.Text>{unit} &times; </InputGroup.Text>\r\n        </InputGroup.Append>\r\n        <FormControl name=\"numRepsInput\" placeholder=\"reps\" max=\"999\" step=\"1\" defaultValue=\"5\" {...formControlProps} />\r\n      </InputGroup>\r\n      <div className=\"button-group\">\r\n        <Button className=\"calc-btn\" type=\"submit\" variant=\"dark\">\r\n          {btnText}\r\n        </Button>\r\n        <Button className=\"settings-btn\" variant=\"dark\" onClick={() => onSettings()}>\r\n          <Cog />\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default SetsCalcForm;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'react-bootstrap';\r\nimport '../css/setContainer.css';\r\n\r\nconst SetContainer = props => {\r\n  const { unit, percentage, weight, numReps, isWorkingSet, btnText, animationDelay } = props;\r\n  const workSetClass = isWorkingSet ? ' working-weight' : '';\r\n\r\n  return (\r\n    <div style={{animationDelay}} className={'set-container d-flex justify-content-between animate-slide-in' + workSetClass}>\r\n      <span className=\"percentage\">{Math.round(percentage * 100)}%</span>\r\n      <span className=\"set\">{`${weight} ${unit} \\u00D7 ${numReps}`}</span>\r\n      <Link to=\"/home\">\r\n        <Button variant=\"dark\" onClick={() => props.onClick(weight)}>\r\n          {btnText}\r\n        </Button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SetContainer;\r\n","import React from 'react';\r\nimport Header from './header';\r\nimport { Button } from 'react-bootstrap';\r\nimport '../../css/popup.css';\r\n\r\nconst Popup = props => {\r\n  const { show, onClose, children, header } = props;\r\n  return (\r\n    <div className={'popup' + (show ? '' : ' hide')}>\r\n      <div className=\"popup__content\">\r\n        <Header mx={3} my={2}>\r\n          <h1>{header}</h1>\r\n          <Button className=\"close-btn\" variant=\"danger\" onClick={() => onClose()}>\r\n            <div>&times;</div>\r\n          </Button>\r\n        </Header>\r\n        <div>{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Popup;\r\n","import React, { useState } from 'react';\r\nimport SetsCalcForm from './setsCalcForm';\r\nimport SetContainer from './setContainer';\r\nimport Header from './common/header';\r\nimport Popup from './common/popup';\r\nimport shortid from 'shortid';\r\nimport '../css/setsCalculator.css';\r\n\r\nconst SetsCalculator = props => {\r\n  const { workWeight, workNumReps, warmUpSets, percentages, unit, onSubmit, onLoad } = props;\r\n  const contProps = { unit, onClick: onLoad, animationDelay: `${warmUpSets.length*0.05}s` };\r\n  const workWeightContProps = { percentage: 1, weight: workWeight, numReps: workNumReps, isWorkingSet: true, btnText: 'Start' };\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const togglePopup = () => { setShowPopup(!showPopup); };\r\n  const formProps = { unit, onSubmit, onSettings: togglePopup, workWeight, btnText: 'Calculate' };\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <a href=\"https://www.t-nation.com/training/most-intelligent-way-to-warm-up\" target=\"#blank\">\r\n          <h1>Warm Up Sets Calculator</h1>\r\n        </a>\r\n      </Header>\r\n      <SetsCalcForm {...formProps} />\r\n      {!showPopup && (\r\n        <div className=\"setList-container\">\r\n          <div className=\"setList mx-auto\">\r\n            {warmUpSets.map((set, index) => {\r\n              const { percentage, weight, numReps } = set;\r\n              const additionalProps = { percentage, weight, numReps, animationDelay: `${index * 0.05}s` };\r\n              return <SetContainer key={shortid.generate()} btnText=\"Load\" {...contProps} {...additionalProps} />;\r\n            })}\r\n            {workWeight !== -1 && <SetContainer key={shortid.generate()} {...contProps} {...workWeightContProps} />}\r\n          </div>\r\n        </div>\r\n      )}\r\n      <Popup show={showPopup} header={\"Sets Toggler\"} onClose={togglePopup}>\r\n        {percentages.map(({ value, on }, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => props.togglePercentage(index)}\r\n            className={`mx-auto d-block mb-3 font-weight-bold btn btn-${on ? 'warning' : 'secondary text-dark'}`}\r\n            style={{ animationDelay: `${index*0.1}s` }}\r\n          >{`${Math.round(value * 100)}%`}</button>\r\n        ))}\r\n      </Popup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SetsCalculator;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../css/about.css';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div className=\"about\" >\r\n      <h1 style={{textAlign: 'center'}}>Less Thinking, More Lifting</h1>\r\n      <p><strong>Finish your workouts faster.</strong> Quickly figure out which plates to mount onto a barbell in order to hit a target weight.</p>\r\n      <p>No more trying to do barbell math in your head. Simply enter a value and see what plates you would need.</p>\r\n      <p><strong>Accommodate for different inventories.</strong> Find the most optimal plate combination, given the plates you have available at the moment.</p>\r\n      <p><strong>Workout smarter.</strong> Warm up by doing some <Link to=\"/warmup\">Ramp Up</Link> sets before starting a heavy set.</p>\r\n      <div className=\"example\">\r\n        <p className=\"m-0\"><strong>Example:</strong></p>\r\n        <p className=\"m-0\">You trying to load 215 lbs:</p>\r\n        <blockquote>\"If the barbell weighs 45, add a plate 45 on each end, that makes 135, then add a plate 35, that makes 205, ..., Oh snap, there are no plate 35s ...\"</blockquote>\r\n        <p className=\"m-0\">You with Barbell Loader:</p>\r\n        <blockquote className=\"mb-0\">\"Enter 215, immediately see the required plate combination. No 35s? No problem, check that plate group off your inventory and enter 215 again.\"</blockquote>\r\n      </div>\r\n      <p>Barbell Loader was inspired by{' '}<a target=\"#blank\" href=\"https://www.happyliftingco.com/pages/rackmath\">RackMath</a>{' '}and built from scratch by Victor Espaillat with the help of React.js and Bootstrap.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","const INV_MAX_PLATES = 16;\r\nconst SLEEVE_MAX_PLATES = 8;\r\n\r\n/**\r\n *\r\n * @param {Number} targetLoad The desired weight to load onto the barbell.\r\n * @param {Number} barLoad The weight value of the barbell.\r\n * @param {Object[]} plateObjs Array of plate objects.\r\n * @param {Number} plateObjs[].value The weight value of the plate.\r\n * @param {String} plateObjs[].color The color of the plate.\r\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\r\n */\r\nconst calculatePlates = (targetLoad, barLoad, plateObjs) => {\r\n  const success = true;\r\n  const dif = Math.abs(targetLoad - barLoad);\r\n  const lightestPlate = plateObjs.reduce((prev, cur) => (prev.value < cur.value ? prev : cur)).value;\r\n\r\n  if (dif === 0) return { success, warn: 'justbar', calcdLoad: barLoad, calcdPlates: [] };\r\n  else if (dif <= lightestPlate)\r\n    return { success, warn: 'roundoff', calcdLoad: barLoad, calcdPlates: [], roundOff: { amount: dif, up: false } };\r\n\r\n  const combinations = findAllValidCombs(targetLoad, barLoad, plateObjs);\r\n  if (combinations.length === 0) return { success: false, warn: 'notEnoughRoom' };\r\n  const bestCombination = findBestComb(combinations);\r\n  const { calcdLoad, calcdPlates, roundOff: roundOffAmount } = bestCombination;\r\n\r\n  let warn, roundOff;\r\n  if (roundOffAmount) {\r\n    warn = 'roundoff';\r\n    roundOff = { amount: roundOffAmount, up: calcdLoad > targetLoad };\r\n  }\r\n\r\n  return { success, calcdLoad, calcdPlates, roundOff, warn };\r\n};\r\n\r\n/**\r\n * Using the given plate objects, finds all the possible and valid plate\r\n * combinations that meet the desired target load with reasonable round off.\r\n * @param {Number} targetLoad The desired weight to load onto the barbell.\r\n * @param {Number} barLoad The weight value of the barbell.\r\n * @param {Object[]} plateObjs Array of plate objects.\r\n * @param {Number} plateObjs[].value The weight value of the plate.\r\n * @param {String} plateObjs[].color The color of the plate.\r\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\r\n */\r\nconst findAllValidCombs = (targetLoad, barLoad, plateObjs) => {\r\n  // console.log('available plates:', availPlates);\r\n  let cpyPlateObjs = plateObjs.map(plate => ({ ...plate }));\r\n  let combinations = [];\r\n  let subsets = calcSubsets(cpyPlateObjs); // array of arrays of plateGroups\r\n  // console.log('all subsets of available plates:', subsets);\r\n\r\n  for (let subset of subsets) {\r\n    let subsetCpy = subset.map(plateGroup => ({ ...plateGroup })); // arrays of plateGroups\r\n    while (subsetCpy.length > 0) {\r\n      let { success, calcdLoad, calcdPlates, roundOff } = isValidComb(targetLoad, barLoad, subsetCpy);\r\n      if (success) combinations.push({ calcdLoad, calcdPlates, roundOff });\r\n      subsetCpy[0].quantity--;\r\n      if (subsetCpy[0].quantity <= 0) subsetCpy.shift();\r\n    }\r\n  }\r\n  // console.log('combinations:', combinations);\r\n  return combinations;\r\n};\r\n\r\n/**\r\n * Determines whether it is possible to load a target weight onto a barbell,\r\n * given an array containing a finite number of plate objects, with a reasonable\r\n * amount of round off allowed.\r\n * If so, returns the calculated plate objects array.\r\n * @param {Number} targetLoad The desired weight to load onto the barbell.\r\n * @param {Number} barLoad The weight value of the barbell.\r\n * @param {Object[]} plateObjs Array of plate objects.\r\n * @param {Number} plateObjs[].value The weight value of the plate.\r\n * @param {String} plateObjs[].color The color of the plate.\r\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\r\n */\r\nconst isValidComb = (targetLoad, barLoad, plateObjs) => {\r\n  let coyPlateObjs = plateObjs.map(plate => ({ ...plate }));\r\n  let calcdLoad = barLoad;\r\n  const calcdPlates = [];\r\n  const lightestPlate = plateObjs.reduce((prev, cur) => (prev.value < cur.value ? prev : cur)).value;\r\n\r\n  for (let plateGroup of coyPlateObjs) {\r\n    let { value, color, quantity } = plateGroup;\r\n    for (let i = 0; i < quantity; ++i) {\r\n      const nextLoad = value * 2;\r\n      const dif = Math.abs(targetLoad - (calcdLoad + nextLoad));\r\n      if (calcdLoad + nextLoad < targetLoad || dif < lightestPlate) {\r\n        calcdLoad += nextLoad;\r\n        calcdPlates.push({ value, color });\r\n        if (calcdPlates.length > SLEEVE_MAX_PLATES) return { success: false };\r\n        plateGroup.quantity--;\r\n      }\r\n    }\r\n  }\r\n  const roundOff = Math.abs(targetLoad - calcdLoad);\r\n  const heaviestPlate = plateObjs.reduce((prev, cur) => (prev.value > cur.value ? prev : cur)).value;\r\n  // Only return success if roundOff is reasonable.\r\n  if (roundOff > heaviestPlate * 2) return { success: false };\r\n  return { success: true, calcdLoad, calcdPlates, roundOff };\r\n};\r\n\r\n/**\r\n * Given an array of possible plate combinations, returns the best one. That is,\r\n * one with the least amount of round off, with the least number of plates\r\n * possible, and one which favors heavier plates first.\r\n * @param {Object[]} combinations\r\n * @param {Number} combinations[].roundOff\r\n * @param {Number} combinations[].caldLoad The sum of every plate value in calcdPlate[].\r\n * @param {Object[]} combinations[].calcdPlates an array of plate objects with no quantity prop, but instead allowing duplicates.\r\n * @param {Number} combinations[].calcdPlates[].value The weight value of the plate.\r\n * @param {String} combinations[].calcdPlates[].color The color of the plate.\r\n */\r\nconst findBestComb = combinations => {\r\n  // console.log('combinations:', combinations);\r\n  const minRoundOff = combinations.reduce((prev, cur) => (prev.roundOff < cur.roundOff ? prev : cur)).roundOff;\r\n  const combsMinRoundOff = combinations.map(comb => ({ ...comb })).filter(comb => comb.roundOff === minRoundOff);\r\n  const minNumPlates = combsMinRoundOff.reduce((prev, cur) =>\r\n    prev.calcdPlates.length < cur.calcdPlates.length ? prev : cur\r\n  ).calcdPlates.length;\r\n  const combsMinNumPlates = combsMinRoundOff\r\n    .map(comb => ({ ...comb }))\r\n    .filter(comb => comb.calcdPlates.length === minNumPlates);\r\n  const combsHeaviestPlates = combsMinNumPlates.reduce((prev, cur) => {\r\n    const prevHeaviestPlate = prev.calcdPlates.reduce((prev, cur) => (prev.value > cur.value ? prev : cur)).value;\r\n    const curHeaviestPlate = cur.calcdPlates.reduce((prev, cur) => (prev.value > cur.value ? prev : cur)).value;\r\n    if (prevHeaviestPlate === curHeaviestPlate) {\r\n      const prevHeaviestCount = prev.calcdPlates.reduce(\r\n        (acc, cur) => (cur.value === prevHeaviestPlate ? acc + 1 : acc),\r\n        0\r\n      );\r\n      const curHeaviestPlate = cur.calcdPlates.reduce(\r\n        (acc, cur) => (cur.value === prevHeaviestPlate ? acc + 1 : acc),\r\n        0\r\n      );\r\n      return prevHeaviestCount > curHeaviestPlate ? prev : cur;\r\n    }\r\n    return prevHeaviestPlate > curHeaviestPlate ? prev : cur;\r\n  });\r\n  // console.log('least round off:', combsMinRoundOff);\r\n  // console.log('least number of plates:', combsMinNumPlates);\r\n  // console.log('favorsHeavierPlates:', combsHeaviestPlates);\r\n  return combsHeaviestPlates;\r\n};\r\n\r\n/**\r\n * Returns an array containing all sub-arrays (subsets) of a given array of\r\n * objects.\r\n * @param {Object[]} set An array of objects.\r\n */\r\nconst calcSubsets = set => {\r\n  let numSubsets = 1 << set.length; // 2^n\r\n  let subsets = [];\r\n\r\n  for (let bitSet = numSubsets - 1; bitSet >= 0; --bitSet) {\r\n    let subset = [];\r\n    // Iterate through the bitSet. Checking each bit.\r\n    for (let j = 0; j < set.length; ++j) {\r\n      // If the bit at position j is turned on in the bit set, push element j.\r\n      if ((bitSet & (1 << j)) > 0) subset.push({ ...set[j] });\r\n    }\r\n    if (subset.length > 0) subsets.push(subset); // Push subset into list of all subsets.\r\n  }\r\n  return subsets;\r\n};\r\n\r\n/**\r\n * Determines whether a given input falls within the range of the given min and max.\r\n * @param {Number} input\r\n * @param {Number} min\r\n * @param {Number} max\r\n */\r\nconst withinRange = (input, min, max) => input >= min && input <= max;\r\n\r\n/**\r\n * Multiplies the quantity value of each plate object in the given array by the\r\n * given modifier value.\r\n * @param {Object[]} plateObjs Array of plate objects.\r\n * @param {Number} plateObjs[].value The weight value of the plate.\r\n * @param {String} plateObjs[].color The color of the plate.\r\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\r\n */\r\nconst modQuantity = (plateObjs, modifier) => {\r\n  return plateObjs\r\n    .filter(({ quantity }) => quantity > 0)\r\n    .map(plate => {\r\n      const { value, color, quantity } = plate;\r\n      return { value, color, quantity: quantity * modifier };\r\n    });\r\n};\r\n\r\nexport { INV_MAX_PLATES, modQuantity, withinRange, calculatePlates };\r\n","import React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport localStorage from 'local-storage';\nimport NavBar from './components/navBar';\nimport Inventory from './components/inventory';\nimport NotFound from './components/common/notFound';\nimport Loader from './components/loader';\nimport SetsCalculator from './components/setsCalculator';\nimport About from './components/about';\nimport { roundToNearestStep, calcRampUpReps } from './utils/rampUps';\nimport { calcBgColor } from './utils/calcBgColor';\nimport { INV_MAX_PLATES, modQuantity, withinRange, calculatePlates } from './utils/plates';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './css/App.css';\nimport './css/utils.css';\nimport './css/toastify.css';\n\nclass App extends Component {\n  state = {\n    barbell: { lbs: 45, kg: 20 },\n    calcdPlates: [],\n    calcdLoad: -1,\n    prevCalcdLoad: -1,\n\n    workWeight: -1,\n    workNumReps: -1,\n    warmUpSets: [/* {percentage, weight, numReps}, ... */],\n    prevWarmUpSets: []\n  };\n\n  constructor(props) {\n    super(props);\n\n    let defaultAvailPlates = {\n      lbs: [\n        { value: 100, quantity: 0 },\n        { value: 65, quantity: 0 },\n        { value: 55, quantity: 0 },\n        { value: 50, quantity: 0 },\n        { value: 45, quantity: INV_MAX_PLATES },\n        { value: 35, quantity: 0 },\n        { value: 30, quantity: 0 },\n        { value: 25, quantity: INV_MAX_PLATES },\n        { value: 20, quantity: 0 },\n        { value: 15, quantity: 0 },\n        { value: 12.5, quantity: 0 },\n        { value: 10, quantity: INV_MAX_PLATES },\n        { value: 7.5, quantity: 0 },\n        { value: 5, quantity: INV_MAX_PLATES },\n        { value: 2.5, quantity: INV_MAX_PLATES },\n        { value: 1.25, quantity: 0 },\n        { value: 1, quantity: 0 },\n        { value: 0.75, quantity: 0 },\n        { value: 0.5, quantity: 0 },\n        { value: 0.25, quantity: 0 }\n      ],\n      kg: [\n        { value: 50, quantity: 0 },\n        { value: 45, quantity: 0 },\n        { value: 35, quantity: 0 },\n        { value: 30, quantity: 0 },\n        { value: 25, quantity: 0 },\n        { value: 20, quantity: INV_MAX_PLATES },\n        { value: 15, quantity: 0 },\n        { value: 12.5, quantity: 0 },\n        { value: 10, quantity: INV_MAX_PLATES },\n        { value: 7.5, quantity: 0 },\n        { value: 5, quantity: INV_MAX_PLATES },\n        { value: 3, quantity: 0 },\n        { value: 2.5, quantity: INV_MAX_PLATES },\n        { value: 2, quantity: 0 },\n        { value: 1.5, quantity: 0 },\n        { value: 1.25, quantity: INV_MAX_PLATES },\n        { value: 1, quantity: 0 },\n        { value: 0.75, quantity: 0 },\n        { value: 0.5, quantity: 0 },\n        { value: 0.25, quantity: 0 }\n      ]\n    };\n    // Give plates color.\n    ['lbs', 'kg'].forEach(unit => {\n      defaultAvailPlates[unit] = defaultAvailPlates[unit].map((plate, index) => {\n        const color = calcBgColor(index);\n        return { ...plate, color };\n      });\n    });\n    const defaultPercentages = [\n      { value: 0.5, on: true },\n      { value: 0.6, on: true },\n      { value: 0.7, on: true },\n      { value: 0.8, on: true },\n      { value: 0.9, on: true },\n      { value: 1.1, on: true }\n    ];\n\n    this.state.unit = localStorage.get('unit') || 'lbs';\n    this.state.percentages = localStorage.get('percentages') || defaultPercentages;\n    this.state.availPlates = localStorage.get('availPlates') || defaultAvailPlates;\n  }\n\n  render() {\n    const { unit, barbell, availPlates, calcdPlates, calcdLoad, prevCalcdLoad, workWeight, workNumReps, warmUpSets, percentages } = this.state;\n    const loaderProps = { unit, barbellWeight: barbell[unit], calcdPlates, calcdLoad, prevCalcdLoad, onSubmit: this.handleLoadSubmit, resetPrevLoad: this.resetPrevLoad };\n    const invProps = { unit, barbell, availPlates, onPlateGroupClick: this.handlePlateGroupClick, onUnitClick: this.handleUnitClick, onClear: this.handlePlateGroupsClear };\n    const setsCalcProps = { unit, workWeight, workNumReps, warmUpSets, onSubmit: this.handleWorkSetSubmit, onLoad: this.handleLoad, percentages, togglePercentage: this.handleTogglePercentage };\n    const toastProps = { /* limit: 1, */ autoClose: 2000, hideProgressBar: true, pauseOnFocusLoss: false, draggable: false, pauseOnHover: false, newestOnTop: true };\n    return (\n      <>\n        <div className=\"container\" style={{ paddingBottom: '70px' }}>\n          <ToastContainer {...toastProps} />\n          <Switch>\n            <Route path=\"/home\" render={() => <Loader {...loaderProps} />} />\n            <Route path=\"/inventory\" render={() => <Inventory {...invProps} />} />\n            <Route path=\"/warmup\" render={() => <SetsCalculator {...setsCalcProps} />} />\n            <Route path=\"/about\" component={About}></Route>\n            <Route path=\"/not-found\" component={NotFound} />\n            <Redirect from=\"/\" exact to=\"/home\" />\n            <Redirect to=\"/not-found\" />\n          </Switch>\n        </div>\n        <NavBar />\n      </>\n    );\n  }\n\n  handleUnitClick = e => {\n    let { unit } = this.state;\n    if (unit === 'lbs') unit = 'kg';\n    else unit = 'lbs';\n    this.setState({ unit, calcdPlates: [], calcdLoad: -1, prevCalcdLoad: -1, workWeight: -1, warmUpSets: [] });\n    e.currentTarget.classList.add('animate-wiggle');\n    e.currentTarget.classList.remove('animate-wiggle');\n    localStorage.set('unit', unit);\n  };\n\n  handlePlateGroupClick = value => {\n    const { unit } = this.state;\n    const availPlates = { ...this.state.availPlates };\n    const i = availPlates[unit].findIndex(element => element.value === value);\n\n    const quant = availPlates[unit][i].quantity;\n    availPlates[unit][i].quantity = quant === 0 ? INV_MAX_PLATES : quant - 2;\n\n    this.setState({ availPlates, calcdPlates: [], calcdLoad: -1, prevCalcdLoad: -1 });\n    localStorage.set('availPlates', availPlates);\n  };\n\n  handleLoadSubmit = e => {\n    e.preventDefault();\n    e.currentTarget.firstElementChild.firstElementChild.blur(); // Blur in order to hide keyboard on mobile.\n    this.handleLoad(e.currentTarget.loadInput.value);\n    // e.currentTarget.loadInput.value = '';\n  };\n\n  handleLoad = load => {\n    const { unit } = this.state;\n    const barLoad = this.state.barbell[unit];\n    let avlPltsOneSide = modQuantity([...this.state.availPlates[unit]], 0.5);\n    const prevCalcdLoad = this.state.calcdLoad; // Set prevLoad to curLoad\n    const maxLoad = barLoad + 2 * avlPltsOneSide.reduce((acc, cur) => acc + cur.value * cur.quantity, 0);\n\n    if (!withinRange(load, barLoad, maxLoad)) {\n      this.setState({ calcdPlates: [], calcdLoad: -1, prevCalcdLoad });\n      if (load < barLoad) toast.error(\"That's not even the bar!\");\n      else if (load > maxLoad) toast.error('Exceeded maximum allowed by inventory!');\n    } else {\n      const { success, warn, calcdLoad, calcdPlates, roundOff } = calculatePlates(load, barLoad, avlPltsOneSide);\n\n      if (warn === 'justbar') toast.success('Just the bar!');\n      else if (warn === 'roundoff') toast.warn(`Inventory limitation—Load rounded ${roundOff.up ? 'up' : 'down'} by ${roundOff.amount} ${unit}.`);\n      else if (warn === 'notEnoughRoom') toast.error('Too many plates to fit on barbell!');\n\n      if (success) this.setState({ calcdPlates, calcdLoad, prevCalcdLoad });\n      else this.setState({ calcdPlates: [], calcdLoad: -1, prevCalcdLoad });\n    }\n  };\n\n  handleWorkSetSubmit = e => {\n    e.preventDefault();\n    // Blur all inputs.\n    e.currentTarget.firstElementChild.querySelectorAll('input').forEach(elem => { elem.blur(); });\n    const { loadInput, numRepsInput } = e.currentTarget;\n    this.updateWarmUpSets(loadInput.value, numRepsInput.value);\n  };\n\n  updateWarmUpSets = (workWeight, workNumReps) => {\n    if (workWeight && workNumReps) {\n      const prevWarmUpSets = this.state.warmUpSets;\n      const warmUpSets = [];\n      const { percentages, unit, barbell, availPlates } = this.state;\n      const barbellWeight = barbell[unit];\n      const lightestPlateAvail = availPlates[unit].filter(plate => plate.quantity > 0).map(plate => plate.value).reduce((prev, cur) => (prev < cur ? prev : cur));\n      percentages.forEach(percentage => {\n        const { value, on } = percentage;\n        if (on) {\n          const weight = roundToNearestStep(workWeight * value, barbellWeight, lightestPlateAvail * 2);\n          const numReps = calcRampUpReps(value, workNumReps);\n          warmUpSets.push({ percentage: value, weight, numReps });\n        }\n      });\n      this.setState({ workWeight, workNumReps, warmUpSets, prevWarmUpSets });\n    } else this.setState({ workWeight: -1, workNumReps: -1, warmUpSets: [], prevWarmUpSets: [] });\n  };\n\n  handlePlateGroupsClear = () => {\n    const { unit } = this.state;\n    let availPlates = { ...this.state.availPlates };\n    availPlates[unit] = availPlates[unit].map(({ value, color }) => ({ value, color, quantity: 0 }));\n    this.setState({ availPlates });\n    localStorage.set('availPlates', availPlates);\n  };\n\n  resetPrevLoad = () => {\n    this.setState({ prevCalcdLoad: -1 });\n  };\n\n  handleTogglePercentage = index => {\n    const percentages = [...this.state.percentages];\n    percentages[index].on = !percentages[index].on;\n    this.setState({ percentages });\n    localStorage.set('percentages', percentages);\n\n    // Update in order to trigger a re-render of the warm up sets.\n    const { workWeight, workNumReps } = this.state;\n    if (workWeight > 0 && workNumReps > 0) this.updateWarmUpSets(workWeight, workNumReps);\n  };\n}\n\nexport default App;\n","const roundToNearestStepHelper = (load, barbell, step) => {\r\n  const remainder = (load - barbell) % step;\r\n  const dividend = load - remainder;\r\n  return remainder >= step / 2 ? dividend + step : dividend;\r\n};\r\n\r\nconst roundToNearestStep = (load, barbell, step) => Math.round(roundToNearestStepHelper(load, barbell, step));\r\n\r\nconst calcRampUpReps = (percentage, workingNumSets) => {\r\n  const numReps = Math.round(workingNumSets * (2 - 4 * (percentage - 0.5)));\r\n  return numReps > 0 ? numReps : 1;\r\n};\r\n\r\nexport { roundToNearestStep, calcRampUpReps };\r\n","export const calcBgColor = input => {\r\n  if (input % 6 === 0) return 'black';\r\n  if (input % 5 === 0) return 'yellow';\r\n  if (input % 4 === 0) return 'red';\r\n  if (input % 3 === 0) return 'purple';\r\n  if (input % 2 === 0) return 'green';\r\n  return 'cyan';\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}