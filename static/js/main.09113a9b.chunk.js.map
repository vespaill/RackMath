{"version":3,"sources":["icons/fire.png","icons/cog.png","components/icons/barbell.jsx","components/icons/plate.jsx","components/icons/info.jsx","components/icons/fire.jsx","components/navBar.jsx","components/invPlateGroup.jsx","components/common/header.jsx","components/inventory.jsx","components/common/notFound.jsx","components/loaderForm.jsx","components/loadValue.jsx","components/loadDiagram.jsx","utils/limitPlateHeight.js","components/loader.jsx","components/icons/cog.jsx","components/setsCalcForm.jsx","components/setContainer.jsx","components/common/popup.jsx","components/setsCalculator.jsx","components/about.jsx","utils/rampUps.js","utils/plates.js","App.js","utils/calcBgColor.js","serviceWorker.js","index.js"],"names":["module","exports","Barbell","className","Icon","Fire","src","fireIcon","alt","NavBar","navLinks","url","pathname","from","component","commonProps","activeClassName","replace","map","index","key","to","InvPlateGroup","props","value","quantity","bgColor","onClick","style","opacity","Header","children","textJustify","React","Children","count","Row","child","Fragment","Inventory","unit","barbell","availPlates","onUnitClick","onPlateGroupClick","onClear","variant","e","minWidth","plate","color","plateGroupProps","Col","xs","NotFound","LoaderForm","Form","onSubmit","InputGroup","FormControl","type","name","placeholder","aria-label","min","step","onFocus","currentTarget","select","Append","Text","Button","btnText","LoadValue","prevCalcdLoad","calcdLoad","id1","shortid","generate","id2","LoadDiagram","barbellWeight","calcdPlates","loadValProps","left","height","min_px","max_px","Loader","resetPrevLoad","formProps","diagramProps","useLocation","useEffect","width","Cog","cogIcon","SetsCalcForm","onSettings","workWeight","formControlProps","maxWeight","max","defaultValue","SetContainer","percentage","weight","numReps","isWorkingSet","workSetClass","Math","round","Popup","show","onClose","SetsCalculator","workNumReps","warmUpSets","percentages","contProps","onLoad","workWeightContProps","useState","showPopUp","setShowPopUp","togglePopup","href","target","set","additionalProps","on","togglePercentage","About","textAlign","roundToNearestStep","load","remainder","dividend","roundToNearestStepHelper","calcRampUpReps","workingNumSets","calculatePlates","targetLoad","barLoad","plateObjs","dif","abs","lightestPlate","reduce","prev","cur","success","warn","roundOff","amount","up","combinations","findAllValidCombs","length","bestCombination","findBestComb","roundOffAmount","cpyPlateObjs","subsets","calcSubsets","subsetCpy","plateGroup","isValidComb","push","shift","coyPlateObjs","i","nextLoad","minRoundOff","combsMinRoundOff","comb","filter","minNumPlates","prevHeaviestPlate","curHeaviestPlate","acc","bitSet","subset","j","withinRange","input","modQuantity","modifier","App","state","lbs","kg","handleUnitClick","setState","classList","add","remove","handlePlateGroupClick","findIndex","element","handleLoadSubmit","preventDefault","firstElementChild","blur","handleLoad","loadInput","avlPltsOneSide","maxLoad","toast","error","handleWorkSetSubmit","querySelectorAll","forEach","elem","numRepsInput","updateWarmUpSets","lightestPlateAvail","handlePlateGroupsClear","handleTogglePercentage","this","loaderProps","invProps","setsCalcProps","toastProps","autoClose","hideProgressBar","pauseOnFocusLoss","draggable","pauseOnHover","newestOnTop","paddingBottom","path","render","exact","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.09113a9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fire.fe489d1d.png\";","module.exports = __webpack_public_path__ + \"static/media/cog.f959e642.png\";","import React from 'react';\r\nimport '../../css/icons/barbell.css';\r\n\r\nconst Barbell = () => {\r\n  return (\r\n    <div className=\"barbell-icon\">\r\n      <div className=\"barbell\">\r\n        <div className=\"barbell__shaft\"></div>\r\n        <div className=\"plate-group--1\">\r\n          <div className=\"plate-group__plate--small\"></div>\r\n          <div className=\"plate-group__plate--med\"></div>\r\n          <div className=\"plate-group__plate--large\"></div>\r\n        </div>\r\n        <div className=\"plate-group--2\">\r\n          <div className=\"plate-group__plate--small\"></div>\r\n          <div className=\"plate-group__plate--med\"></div>\r\n          <div className=\"plate-group__plate--large\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Barbell;\r\n","import React from 'react';\r\nimport '../../css/icons/plate.css';\r\n\r\nconst Barbell = () => {\r\n  return (\r\n    <div className=\"plate-icon\">\r\n      <div className=\"plate__outline\"></div>\r\n      <div className=\"plate__circle\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Barbell;\r\n","import React from 'react';\r\nimport '../../css/icons/info.css';\r\n\r\nconst Icon = () => (\r\n  <div className=\"info-icon\">\r\n    <div>i</div>\r\n  </div>\r\n);\r\n\r\nexport default Icon;\r\n","import React from 'react';\r\nimport fireIcon from '../../icons/fire.png'\r\nimport '../../css/icons/fire.css'\r\n\r\nconst Fire = () => {\r\n  return <img className=\"fire-icon\" src={fireIcon} alt=\"fire\" />;\r\n};\r\n\r\nexport default Fire;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../css/navBar.css';\r\nimport Barbell from './icons/barbell';\r\nimport Plate from './icons/plate';\r\nimport Info from './icons/info';\r\nimport Fire from './icons/fire';\r\n\r\nconst NavBar = () => {\r\n  const navLinks = [\r\n    { url: { pathname: '/home', from: 'navBar' }, component: <Barbell /> },\r\n    { url: '/warmup', component: <Fire /> },\r\n    { url: '/inventory', component: <Plate /> },\r\n    { url: '/about', component: <Info /> }\r\n  ];\r\n  const commonProps = { className: 'nav-item', activeClassName: 'active-class', replace: true };\r\n  return (\r\n    <nav className=\"bg-red navbar fixed-bottom d-flex justify-content-between\">\r\n      {navLinks.map(({ url, component }, index) => (\r\n        <NavLink key={index} {...commonProps} to={url}>\r\n          {component}\r\n        </NavLink>\r\n      ))}\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\n\r\nconst InvPlateGroup = props => {\r\n  const { value, quantity, bgColor, onClick } = props;\r\n\r\n  return (\r\n    <div className=\"plate-group text-center\">\r\n      <button onClick={() => onClick(value)} className={'plate-group__plate' + (quantity ? ' bg-' + bgColor : '')}>\r\n        <span className=\"center-vertically\">{value}</span>\r\n      </button>\r\n      <div className=\"plate-group__quantity\" style={{ opacity: quantity > 0 ? '100%' : '0' }}>\r\n        <span className=\"center-vertically unselectable\">{quantity}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvPlateGroup;\r\n","import React from 'react';\r\nimport { Row } from 'react-bootstrap';\r\n\r\nconst Header = ({ children }) => {\r\n  const textJustify = React.Children.count(children) > 1 ? 'between' : 'center';\r\n\r\n  return (\r\n    <Row className={`my-1 mx-3 d-flex justify-content-${textJustify}`}>\r\n      {React.Children.map(children, child => (\r\n        <React.Fragment>{child}</React.Fragment>\r\n      ))}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport InvPlateGroup from './invPlateGroup';\r\nimport Header from './common/header';\r\nimport '../css/inventory.css';\r\n\r\nconst Inventory = props => {\r\n  const { unit, barbell, availPlates, onUnitClick, onPlateGroupClick, onClear } = props;\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <h1>Unit</h1>\r\n        <button className=\"btn-unit\" variant=\"danger\" onClick={e => onUnitClick(e)}>\r\n          {unit}\r\n        </button>\r\n      </Header>\r\n      <Header>\r\n        <h1>Barbell</h1>\r\n        <h1>{barbell[unit]}</h1>\r\n      </Header>\r\n      <Header>\r\n        <h1>Available plates</h1>\r\n      </Header>\r\n      <Row style={{ minWidth: '300px' }}>\r\n        {availPlates[unit].map((plate, index) => {\r\n          const { value, color, quantity } = plate;\r\n          const plateGroupProps = { onClick: onPlateGroupClick, value, quantity, bgColor: color };\r\n          return (\r\n            <Col key={index} xs={4}>\r\n              <InvPlateGroup {...plateGroupProps} />\r\n            </Col>\r\n          );\r\n        })}\r\n        <Col xs={4}>\r\n          <div className=\"btn-clear-container text-center\">\r\n            <button className=\"btn-clear\" onClick={() => onClear()}>\r\n              <span className=\"center-vertically\">clear</span>\r\n            </button>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Inventory;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n  return <h1>Not Found</h1>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport { Form, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../css/loadForm.css';\r\n\r\nconst LoaderForm = props => {\r\n  return (\r\n    <Form onSubmit={e => props.onSubmit(e)}>\r\n      <InputGroup>\r\n        <FormControl\r\n          className=\"text-right\"\r\n          type=\"number\"\r\n          name=\"loadInput\"\r\n          placeholder={props.placeholder}\r\n          aria-label=\"weight\"\r\n          min=\"0\"\r\n          step=\"0.5\"\r\n          onFocus={e => { e.currentTarget.select(); }}\r\n        />\r\n        <InputGroup.Append>\r\n          <InputGroup.Text className=\"weight-input__text\">\r\n            {props.unit}\r\n          </InputGroup.Text>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n      <div>\r\n        <Button className=\"mx-auto d-block\" variant=\"dark\" type=\"submit\">\r\n          {props.btnText}\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default LoaderForm;\r\n","import React from 'react';\r\nimport '../css/loadValue.css';\r\nimport shortid from 'shortid';\r\n\r\nconst LoadValue = props => {\r\n  const { prevCalcdLoad, calcdLoad, unit } = props;\r\n\r\n  const id1 = shortid.generate();\r\n  const id2 = shortid.generate();\r\n\r\n  return (\r\n    <div className=\"load-value center-vertically\">\r\n      {prevCalcdLoad > -1 && (\r\n        <div key={id1} className=\"load-value__prev badge badge-success animate-leave\">\r\n          {`${prevCalcdLoad} ${unit}`}\r\n        </div>\r\n      )}\r\n      {calcdLoad > -1 && (\r\n        <div key={id2} className=\"load-value__cur badge badge-success animate-enter\">\r\n          {`${calcdLoad} ${unit}`}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadValue;\r\n","import React from 'react';\r\nimport { limitPlateHeight } from '../utils/limitPlateHeight';\r\nimport '../css/loadDiagram.css';\r\nimport LoadValue from './loadValue';\r\n\r\nconst LoadDiagram = props => {\r\n  const { unit, barbellWeight, calcdPlates, calcdLoad, prevCalcdLoad } = props;\r\n  const loadValProps = { unit, calcdLoad, prevCalcdLoad };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"load\">\r\n        <div className=\"load__barbell--shaft\">\r\n          <div>{barbellWeight}</div>\r\n        </div>\r\n        <div className=\"load__barbell--sleeve-threshold\" />\r\n        <div className=\"load__plate-group\">\r\n          <div style={{ opacity: '0px' }} className=\"plate-container\" />\r\n          {calcdPlates.map((plate, index) => (\r\n            <div key={index} className=\"plate-container\" style={{ left: `${index * 32 + 32}px` }}>\r\n              <div\r\n                className={`plate-container__plate center-vertically bg-${plate.color}`}\r\n                style={{ height: `${limitPlateHeight(plate.value * 7, 45, 315)}px` }}\r\n              />\r\n              <div className=\"plate-container__plate--text center-vertically\">{plate.value}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <LoadValue {...loadValProps} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoadDiagram;\r\n","export const limitPlateHeight = (height, min_px, max_px) => {\r\n  if (height >= max_px) return max_px;\r\n  if (height <= min_px) return min_px;\r\n  return height;\r\n};","import React, { useEffect } from 'react';\r\nimport Header from './common/header';\r\nimport LoaderForm from './loaderForm';\r\nimport LoadDiagram from './loadDiagram';\r\nimport { useLocation, Redirect } from 'react-router-dom';\r\n\r\nconst Loader = props => {\r\n  const { unit, barbellWeight, calcdPlates, calcdLoad, prevCalcdLoad, onSubmit, resetPrevLoad } = props;\r\n  const formProps = { unit, onSubmit };\r\n  const diagramProps = { unit, barbellWeight, calcdPlates, calcdLoad, prevCalcdLoad };\r\n  const { from } = useLocation();\r\n\r\n  // Similar to componentDidMount and componentDidUpdate:\r\n  useEffect(() => {\r\n    if (from === 'navBar') resetPrevLoad();\r\n  }, [from, resetPrevLoad]);\r\n\r\n  return from === 'navBar' ? (\r\n    <Redirect to=\"/home\" />\r\n  ) : (\r\n    <>\r\n      <Header>\r\n        <h1>Barbell Loader</h1>\r\n      </Header>\r\n      <LoaderForm {...formProps} placeholder=\"Enter Weight\" btnText=\"Load\" />\r\n      <LoadDiagram {...diagramProps} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport cogIcon from '../../icons/cog.png';\r\n\r\nconst style = { width: '100%' };\r\nconst Cog = () => <img className=\"cog-icon\" style={style} src={cogIcon} alt=\"cog\" />;\r\n\r\nexport default Cog;\r\n","import React from 'react';\r\nimport { Form, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport Cog from './icons/cog';\r\nimport '../css/loadForm.css';\r\n\r\nconst SetsCalcForm = props => {\r\n  const {unit, onSubmit, btnText, onSettings, workWeight} = props;\r\n  const formControlProps = {\r\n    type: 'number',\r\n    min: '0',\r\n    onFocus: e => { e.currentTarget.select(); }\r\n  };\r\n  const maxWeight = unit === 'kg' ? 2840 : 7000;\r\n\r\n  return (\r\n    <Form onSubmit={e => onSubmit(e)}>\r\n      <InputGroup>\r\n        <FormControl name=\"loadInput\" placeholder={workWeight > 0? workWeight : \"weight\"} step=\"0.5\" max={maxWeight} {...formControlProps} />\r\n        <InputGroup.Append>\r\n          <InputGroup.Text>{unit} × </InputGroup.Text>\r\n        </InputGroup.Append>\r\n        <FormControl name=\"numRepsInput\" placeholder=\"reps\" max=\"999\" step=\"1\" defaultValue=\"5\" {...formControlProps} />\r\n      </InputGroup>\r\n      <div className=\"button-group\">\r\n        <Button className=\"calc-btn\" type=\"submit\" variant=\"dark\">\r\n          {btnText}\r\n        </Button>\r\n        <Button className=\"settings-btn\" variant=\"dark\" onClick={() => onSettings()}>\r\n          <Cog />\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default SetsCalcForm;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'react-bootstrap';\r\nimport '../css/setContainer.css';\r\n\r\nconst SetContainer = props => {\r\n  const { unit, percentage, weight, numReps, isWorkingSet, btnText } = props;\r\n  const workSetClass = isWorkingSet ? ' working-weight' : '';\r\n\r\n  return (\r\n    <div className={'set-container d-flex justify-content-between' + workSetClass}>\r\n      <div className=\"percent-container\">\r\n        <span className=\"percentage badge badge-warning\">{Math.round(percentage * 100)}%</span>\r\n      </div>\r\n      <span className=\"set\">{`${weight} ${unit} × ${numReps}`}</span>\r\n      <Link to=\"/home\">\r\n        <Button className=\"btn btn-dark\" onClick={() => props.onClick(weight)}>\r\n          {btnText}\r\n        </Button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SetContainer;\r\n","import React from 'react';\r\nimport '../../css/popup.css';\r\n\r\nconst Popup = props => {\r\n  const { show, onClose, children } = props;\r\n  return (\r\n    <div className={'popup__container' + (show ? '' : ' hide')}>\r\n      <div className=\"popup__background center-vertically\"></div>\r\n      <div className=\"popup__card center-vertically\">\r\n        <button className=\"close-mark btn btn-danger\" onClick={() => onClose()}>\r\n          <div>X</div>\r\n        </button>\r\n        <div className=\"popup__content center-vertically\">{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Popup;\r\n","import React, { useState } from 'react';\r\nimport SetsCalcForm from './setsCalcForm';\r\nimport SetContainer from './setContainer';\r\nimport Header from './common/header';\r\nimport Popup from './common/popup';\r\nimport '../css/setsCalculator.css';\r\n\r\nconst SetsCalculator = props => {\r\n  const { workWeight, workNumReps, warmUpSets, percentages, unit, onSubmit, onLoad } = props;\r\n  const contProps = { unit, onClick: onLoad };\r\n  const workWeightContProps = { percentage: 1, weight: workWeight, numReps: workNumReps, isWorkingSet: true, btnText: 'Start' };\r\n  const [showPopUp, setShowPopUp] = useState(false);\r\n  const togglePopup = () => { setShowPopUp(!showPopUp); };\r\n  const formProps = { unit, onSubmit, onSettings: togglePopup, workWeight, btnText: 'Calculate'};\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <a href=\"https://www.t-nation.com/training/most-intelligent-way-to-warm-up\" target=\"#blank\">\r\n          <h1>Warm Up Sets Calculator</h1>\r\n        </a>\r\n      </Header>\r\n      <SetsCalcForm {...formProps} />\r\n      <div className=\"setList-container\">\r\n        <div className=\"setList mx-auto\">\r\n          {warmUpSets.map((set, index) => {\r\n            const { percentage, weight, numReps } = set;\r\n            const additionalProps = { percentage, weight, numReps };\r\n            return <SetContainer key={index} btnText=\"Load\" {...contProps} {...additionalProps} />;\r\n          })}\r\n          {workWeight !== -1 && <SetContainer {...contProps} {...workWeightContProps} />}\r\n        </div>\r\n      </div>\r\n      <Popup show={showPopUp} onClose={togglePopup}>\r\n        <Header>\r\n          <h1>Sets Toggler</h1>\r\n        </Header>\r\n        {percentages.map((percentages, index) => {\r\n          const { value, on } = percentages;\r\n          return (\r\n            <button\r\n              key={index}\r\n              onClick={() => props.togglePercentage(index)}\r\n              className={`mx-auto d-block mb-3 btn btn-${on ? 'success' : 'secondary'}`}\r\n            >{`${Math.round(value * 100)}%`}</button>\r\n          );\r\n        })}\r\n      </Popup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SetsCalculator;\r\n","import React from 'react';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div\r\n      className=\"center-vertically\"\r\n      style={{\r\n        textAlign: 'justify'\r\n      }}\r\n    >\r\n      Barbell Loader was inspired by{' '}\r\n      <a target=\"#blank\" href=\"https://www.happyliftingco.com/pages/rackmath\">RackMath</a> and\r\n      built from scratch by Victor Espaillat with the help of React.js and\r\n      Bootstrap.\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","const roundToNearestStepHelper = (load, barbell, step) => {\r\n  const remainder = (load - barbell) % step;\r\n  const dividend = load - remainder;\r\n  return remainder >= step / 2 ? dividend + step : dividend;\r\n};\r\n\r\nconst roundToNearestStep = (load, barbell, step) => Math.round(roundToNearestStepHelper(load, barbell, step));\r\n\r\nconst calcRampUpReps = (percentage, workingNumSets) => {\r\n  const numReps = Math.round(workingNumSets * (2 - 4 * (percentage - 0.5)));\r\n  return numReps > 0 ? numReps : 1;\r\n};\r\n\r\nexport { roundToNearestStep, calcRampUpReps };\r\n","const MAX_PLATES = 8;\r\n\r\n/**\r\n *\r\n * @param {Number} targetLoad The desired weight to load onto the barbell.\r\n * @param {Number} barLoad The weight value of the barbell.\r\n * @param {Object[]} plateObjs Array of plate objects.\r\n * @param {Number} plateObjs[].value The weight value of the plate.\r\n * @param {String} plateObjs[].color The color of the plate.\r\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\r\n */\r\nconst calculatePlates = (targetLoad, barLoad, plateObjs) => {\r\n  const success = true;\r\n  const dif = Math.abs(targetLoad - barLoad);\r\n  const lightestPlate = plateObjs.reduce((prev, cur) => (prev.value < cur.value ? prev : cur)).value;\r\n\r\n  if (dif === 0) return { success, warn: 'justbar', calcdLoad: barLoad, calcdPlates: [] };\r\n  else if (dif <= lightestPlate)\r\n    return { success, warn: 'roundoff', calcdLoad: barLoad, calcdPlates: [], roundOff: { amount: dif, up: false } };\r\n\r\n  const combinations = findAllValidCombs(targetLoad, barLoad, plateObjs);\r\n  if (combinations.length === 0) return { success: false, warn: 'notEnoughRoom' };\r\n  const bestCombination = findBestComb(combinations);\r\n  const { calcdLoad, calcdPlates, roundOff: roundOffAmount } = bestCombination;\r\n\r\n  let warn, roundOff;\r\n  if (roundOffAmount) {\r\n    warn = 'roundoff';\r\n    roundOff = { amount: roundOffAmount, up: calcdLoad > targetLoad };\r\n  }\r\n\r\n  return { success, calcdLoad, calcdPlates, roundOff, warn };\r\n};\r\n\r\n/**\r\n * Using the given plate objects, finds all the possible and valid plate\r\n * combinations that meet the desired target load with reasonable round off.\r\n * @param {Number} targetLoad The desired weight to load onto the barbell.\r\n * @param {Number} barLoad The weight value of the barbell.\r\n * @param {Object[]} plateObjs Array of plate objects.\r\n * @param {Number} plateObjs[].value The weight value of the plate.\r\n * @param {String} plateObjs[].color The color of the plate.\r\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\r\n */\r\nconst findAllValidCombs = (targetLoad, barLoad, plateObjs) => {\r\n  // console.log('available plates:', availPlates);\r\n  let cpyPlateObjs = plateObjs.map(plate => ({ ...plate }));\r\n  let combinations = [];\r\n  let subsets = calcSubsets(cpyPlateObjs); // array of arrays of plateGroups\r\n  // console.log('all subsets of available plates:', subsets);\r\n\r\n  for (let subset of subsets) {\r\n    let subsetCpy = subset.map(plateGroup => ({ ...plateGroup })); // arrays of plateGroups\r\n    while (subsetCpy.length > 0) {\r\n      let { success, calcdLoad, calcdPlates, roundOff } = isValidComb(targetLoad, barLoad, subsetCpy);\r\n      if (success) combinations.push({ calcdLoad, calcdPlates, roundOff });\r\n      subsetCpy[0].quantity--;\r\n      if (subsetCpy[0].quantity <= 0) subsetCpy.shift();\r\n    }\r\n  }\r\n  // console.log('combinations:', combinations);\r\n  return combinations;\r\n};\r\n\r\n/**\r\n * Determines whether it is possible to load a target weight onto a barbell,\r\n * given an array containing a finite number of plate objects, with a reasonable\r\n * amount of round off allowed.\r\n * If so, returns the calculated plate objects array.\r\n * @param {Number} targetLoad The desired weight to load onto the barbell.\r\n * @param {Number} barLoad The weight value of the barbell.\r\n * @param {Object[]} plateObjs Array of plate objects.\r\n * @param {Number} plateObjs[].value The weight value of the plate.\r\n * @param {String} plateObjs[].color The color of the plate.\r\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\r\n */\r\nconst isValidComb = (targetLoad, barLoad, plateObjs) => {\r\n  let coyPlateObjs = plateObjs.map(plate => ({ ...plate }));\r\n  let calcdLoad = barLoad;\r\n  const calcdPlates = [];\r\n  const lightestPlate = plateObjs.reduce((prev, cur) => (prev.value < cur.value ? prev : cur)).value;\r\n\r\n  for (let plateGroup of coyPlateObjs) {\r\n    let { value, color, quantity } = plateGroup;\r\n    for (let i = 0; i < quantity; ++i) {\r\n      const nextLoad = value * 2;\r\n      const dif = Math.abs(targetLoad - (calcdLoad + nextLoad));\r\n      if (calcdLoad + nextLoad < targetLoad || dif < lightestPlate) {\r\n        calcdLoad += nextLoad;\r\n        calcdPlates.push({ value, color });\r\n        if (calcdPlates.length > MAX_PLATES) return { success: false };\r\n        plateGroup.quantity--;\r\n      }\r\n    }\r\n  }\r\n  const roundOff = Math.abs(targetLoad - calcdLoad);\r\n  const heaviestPlate = plateObjs.reduce((prev, cur) => (prev.value > cur.value ? prev : cur)).value;\r\n  // Only return success if roundOff is reasonable.\r\n  if (roundOff > heaviestPlate * 2) return { success: false };\r\n  return { success: true, calcdLoad, calcdPlates, roundOff };\r\n};\r\n\r\n/**\r\n * Given an array of possible plate combinations, returns the best one. That is,\r\n * one with the least amount of round off, with the least number of plates\r\n * possible, and one which favors heavier plates first.\r\n * @param {Object[]} combinations\r\n * @param {Number} combinations[].roundOff\r\n * @param {Number} combinations[].caldLoad The sum of every plate value in calcdPlate[].\r\n * @param {Object[]} combinations[].calcdPlates an array of plate objects with no quantity prop, but instead allowing duplicates.\r\n * @param {Number} combinations[].calcdPlates[].value The weight value of the plate.\r\n * @param {String} combinations[].calcdPlates[].color The color of the plate.\r\n */\r\nconst findBestComb = combinations => {\r\n  // console.log('combinations:', combinations);\r\n  const minRoundOff = combinations.reduce((prev, cur) => (prev.roundOff < cur.roundOff ? prev : cur)).roundOff;\r\n  const combsMinRoundOff = combinations.map(comb => ({ ...comb })).filter(comb => comb.roundOff === minRoundOff);\r\n  const minNumPlates = combsMinRoundOff.reduce((prev, cur) =>\r\n    prev.calcdPlates.length < cur.calcdPlates.length ? prev : cur\r\n  ).calcdPlates.length;\r\n  const combsMinNumPlates = combsMinRoundOff\r\n    .map(comb => ({ ...comb }))\r\n    .filter(comb => comb.calcdPlates.length === minNumPlates);\r\n  const combsHeaviestPlates = combsMinNumPlates.reduce((prev, cur) => {\r\n    const prevHeaviestPlate = prev.calcdPlates.reduce((prev, cur) => (prev.value > cur.value ? prev : cur)).value;\r\n    const curHeaviestPlate = cur.calcdPlates.reduce((prev, cur) => (prev.value > cur.value ? prev : cur)).value;\r\n    if (prevHeaviestPlate === curHeaviestPlate) {\r\n      const prevHeaviestCount = prev.calcdPlates.reduce(\r\n        (acc, cur) => (cur.value === prevHeaviestPlate ? acc + 1 : acc),\r\n        0\r\n      );\r\n      const curHeaviestPlate = cur.calcdPlates.reduce(\r\n        (acc, cur) => (cur.value === prevHeaviestPlate ? acc + 1 : acc),\r\n        0\r\n      );\r\n      return prevHeaviestCount > curHeaviestPlate ? prev : cur;\r\n    }\r\n    return prevHeaviestPlate > curHeaviestPlate ? prev : cur;\r\n  });\r\n  // console.log('least round off:', combsMinRoundOff);\r\n  // console.log('least number of plates:', combsMinNumPlates);\r\n  // console.log('favorsHeavierPlates:', combsHeaviestPlates);\r\n  return combsHeaviestPlates;\r\n};\r\n\r\n/**\r\n * Returns an array containing all sub-arrays (subsets) of a given array of\r\n * objects.\r\n * @param {Object[]} set An array of objects.\r\n */\r\nconst calcSubsets = set => {\r\n  let numSubsets = 1 << set.length; // 2^n\r\n  let subsets = [];\r\n\r\n  for (let bitSet = numSubsets - 1; bitSet >= 0; --bitSet) {\r\n    let subset = [];\r\n    // Iterate through the bitSet. Checking each bit.\r\n    for (let j = 0; j < set.length; ++j) {\r\n      // If the bit at position j is turned on in the bit set, push element j.\r\n      if ((bitSet & (1 << j)) > 0) subset.push({ ...set[j] });\r\n    }\r\n    if (subset.length > 0) subsets.push(subset); // Push subset into list of all subsets.\r\n  }\r\n  return subsets;\r\n};\r\n\r\n/**\r\n * Determines whether a given input falls within the range of the given min and max.\r\n * @param {Number} input\r\n * @param {Number} min\r\n * @param {Number} max\r\n */\r\nconst withinRange = (input, min, max) => input >= min && input <= max;\r\n\r\n/**\r\n * Multiplies the quantity value of each plate object in the given array by the\r\n * given modifier value.\r\n * @param {Object[]} plateObjs Array of plate objects.\r\n * @param {Number} plateObjs[].value The weight value of the plate.\r\n * @param {String} plateObjs[].color The color of the plate.\r\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\r\n */\r\nconst modQuantity = (plateObjs, modifier) => {\r\n  return plateObjs\r\n    .filter(({ quantity }) => quantity > 0)\r\n    .map(plate => {\r\n      const { value, color, quantity } = plate;\r\n      return { value, color, quantity: quantity * modifier };\r\n    });\r\n};\r\n\r\nexport { MAX_PLATES, modQuantity, withinRange, calculatePlates };\r\n","import React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport NavBar from './components/navBar';\nimport Inventory from './components/inventory';\nimport NotFound from './components/common/notFound';\nimport Loader from './components/loader';\nimport SetsCalculator from './components/setsCalculator';\nimport About from './components/about';\nimport { roundToNearestStep, calcRampUpReps } from './utils/rampUps';\nimport { calcBgColor } from './utils/calcBgColor';\nimport { MAX_PLATES, modQuantity, withinRange, calculatePlates } from './utils/plates';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './css/App.css';\nimport './css/utils.css';\nimport './css/toastify.css';\n\nclass App extends Component {\n  state = {\n    // Inventory related\n    unit: 'lbs',\n    barbell: { lbs: 45, kg: 20 },\n    availPlates: {\n      lbs: [\n        { value: 100, quantity: 0 },\n        { value: 65, quantity: 0 },\n        { value: 55, quantity: 0 },\n        { value: 50, quantity: 0 },\n        { value: 45, quantity: MAX_PLATES },\n        { value: 35, quantity: 0 },\n        { value: 30, quantity: 0 },\n        { value: 25, quantity: MAX_PLATES },\n        { value: 20, quantity: 0 },\n        { value: 15, quantity: 0 },\n        { value: 12.5, quantity: 0 },\n        { value: 10, quantity: MAX_PLATES },\n        { value: 7.5, quantity: 0 },\n        { value: 5, quantity: MAX_PLATES },\n        { value: 2.5, quantity: MAX_PLATES },\n        { value: 1.25, quantity: 0 },\n        { value: 1, quantity: 0 },\n        { value: 0.75, quantity: 0 },\n        { value: 0.5, quantity: 0 },\n        { value: 0.25, quantity: 0 }\n      ],\n      kg: [\n        { value: 50, quantity: 0 },\n        { value: 45, quantity: 0 },\n        { value: 35, quantity: 0 },\n        { value: 30, quantity: 0 },\n        { value: 25, quantity: 0 },\n        { value: 20, quantity: MAX_PLATES },\n        { value: 15, quantity: 0 },\n        { value: 12.5, quantity: 0 },\n        { value: 10, quantity: MAX_PLATES },\n        { value: 7.5, quantity: 0 },\n        { value: 5, quantity: MAX_PLATES },\n        { value: 3, quantity: 0 },\n        { value: 2.5, quantity: MAX_PLATES },\n        { value: 2, quantity: 0 },\n        { value: 1.5, quantity: 0 },\n        { value: 1.25, quantity: MAX_PLATES },\n        { value: 1, quantity: 0 },\n        { value: 0.75, quantity: 0 },\n        { value: 0.5, quantity: 0 },\n        { value: 0.25, quantity: 0 }\n      ]\n    },\n    calcdPlates: [],\n    calcdLoad: -1,\n    prevCalcdLoad: -1,\n\n    // Warm Up related\n    percentages: [\n      { value: 0.5, on: true },\n      { value: 0.6, on: true },\n      { value: 0.7, on: true },\n      { value: 0.8, on: true },\n      { value: 0.9, on: true },\n      { value: 1.1, on: true }\n    ],\n    workWeight: -1,\n    workNumReps: -1,\n    warmUpSets: [\n      /* {percentage, weight, numReps}, ... */\n    ]\n  };\n\n  componentDidMount() {\n    let availPlates = {};\n    // Give plates a color property.\n    ['lbs', 'kg'].forEach(unit => {\n      availPlates[unit] = this.state.availPlates[unit].map((plate, index) => ({\n        ...plate,\n        color: calcBgColor(index)\n      }));\n    });\n    this.setState({ availPlates });\n  }\n\n  render() {\n    const {\n      unit,\n      barbell,\n      availPlates,\n      calcdPlates,\n      calcdLoad,\n      prevCalcdLoad,\n      workWeight,\n      workNumReps,\n      warmUpSets,\n      percentages\n    } = this.state;\n    const loaderProps = {\n      unit,\n      barbellWeight: barbell[unit],\n      calcdPlates,\n      calcdLoad,\n      prevCalcdLoad,\n      onSubmit: this.handleLoadSubmit,\n      resetPrevLoad: this.resetPrevLoad\n    };\n    const invProps = {\n      unit,\n      barbell,\n      availPlates,\n      onPlateGroupClick: this.handlePlateGroupClick,\n      onUnitClick: this.handleUnitClick,\n      onClear: this.handlePlateGroupsClear\n    };\n    const setsCalcProps = {\n      unit,\n      workWeight,\n      workNumReps,\n      warmUpSets,\n      onSubmit: this.handleWorkSetSubmit,\n      onLoad: this.handleLoad,\n      percentages,\n      togglePercentage: this.handleTogglePercentage\n    };\n    const toastProps = {\n      /* limit: 1, */ autoClose: 2000,\n      hideProgressBar: true,\n      pauseOnFocusLoss: false,\n      draggable: false,\n      pauseOnHover: false,\n      newestOnTop: true\n    };\n    return (\n      <>\n        <div className=\"container\" style={{ paddingBottom: '70px' }}>\n          <ToastContainer {...toastProps} />\n          <Switch>\n            <Route path=\"/home\" render={() => <Loader {...loaderProps} />} />\n            <Route path=\"/inventory\" render={() => <Inventory {...invProps} />} />\n            <Route path=\"/warmup\" render={() => <SetsCalculator {...setsCalcProps} />} />\n            <Route path=\"/about\" component={About}></Route>\n            <Route path=\"/not-found\" component={NotFound} />\n            <Redirect from=\"/\" exact to=\"/home\" />\n            <Redirect to=\"/not-found\" />\n          </Switch>\n        </div>\n        <NavBar />\n      </>\n    );\n  }\n\n  handleUnitClick = e => {\n    let { unit } = this.state;\n    if (unit === 'lbs') unit = 'kg';\n    else unit = 'lbs';\n    this.setState({ unit, calcdPlates: [], calcdLoad: -1, prevCalcdLoad: -1, workWeight: -1, warmUpSets: [] });\n    e.currentTarget.classList.add('animate-wiggle');\n    e.currentTarget.classList.remove('animate-wiggle');\n  };\n\n  handlePlateGroupClick = value => {\n    const { unit } = this.state;\n    const availPlates = { ...this.state.availPlates };\n    const i = availPlates[unit].findIndex(element => element.value === value);\n    availPlates[unit][i].quantity = (availPlates[unit][i].quantity + 2) % (MAX_PLATES + 2);\n    this.setState({ availPlates, calcdPlates: [], calcdLoad: -1, prevCalcdLoad: -1 });\n  };\n\n  handleLoadSubmit = e => {\n    e.preventDefault();\n    // Blur in order to hide keyboard on mobile.\n    e.currentTarget.firstElementChild.firstElementChild.blur();\n    this.handleLoad(e.currentTarget.loadInput.value);\n    // e.currentTarget.loadInput.value = '';\n  };\n\n  handleLoad = load => {\n    const { unit } = this.state;\n    const barLoad = this.state.barbell[unit];\n    let avlPltsOneSide = modQuantity([...this.state.availPlates[unit]], 0.5);\n    const prevCalcdLoad = this.state.calcdLoad;\n    const maxLoad = barLoad + 2 * avlPltsOneSide.reduce((acc, cur) => acc + cur.value * cur.quantity, 0);\n\n    if (!withinRange(load, barLoad, maxLoad)) {\n      this.setState({ calcdPlates: [], calcdLoad: -1, prevCalcdLoad });\n      if (load < barLoad) toast.error(\"That's not even the bar!\");\n      else if (load > maxLoad) toast.error('Exceeded maximum allowed by inventory!');\n    } else {\n      const { success, warn, calcdLoad, calcdPlates, roundOff } = calculatePlates(load, barLoad, avlPltsOneSide);\n\n      if (warn === 'justbar') toast.success('Just the bar!');\n      else if (warn === 'roundoff')\n        toast.warn(`Inventory limitation—Load rounded ${roundOff.up ? 'up' : 'down'} by ${roundOff.amount} ${unit}.`);\n      else if (warn === 'notEnoughRoom') toast.error('Too many plates to fit on barbell!');\n\n      if (success) this.setState({ calcdPlates, calcdLoad, prevCalcdLoad });\n      else this.setState({ calcdPlates: [], calcdLoad: -1, prevCalcdLoad });\n    }\n  };\n\n  handleWorkSetSubmit = e => {\n    e.preventDefault();\n    e.currentTarget.firstElementChild.querySelectorAll('input').forEach(elem => {\n      elem.blur();\n    });\n    const { loadInput, numRepsInput } = e.currentTarget;\n    this.updateWarmUpSets(loadInput.value, numRepsInput.value);\n  };\n\n  updateWarmUpSets = (workWeight, workNumReps) => {\n    if (workWeight && workNumReps) {\n      const warmUpSets = [];\n      const { percentages, unit, barbell, availPlates } = this.state;\n      const barbellWeight = barbell[unit];\n      const lightestPlateAvail = availPlates[unit]\n        .filter(plate => plate.quantity > 0)\n        .map(plate => plate.value)\n        .reduce((prev, cur) => (prev < cur ? prev : cur));\n      // console.log('handleWorkSetSubmit(): lightestPlate =', lightestPlateAvail);\n      percentages.forEach(percentage => {\n        const { value, on } = percentage;\n        if (on) {\n          const weight = roundToNearestStep(workWeight * value, barbellWeight, lightestPlateAvail * 2);\n          const numReps = calcRampUpReps(value, workNumReps);\n          warmUpSets.push({ percentage: value, weight, numReps });\n        }\n      });\n      this.setState({ workWeight, workNumReps, warmUpSets });\n    } else this.setState({ workWeight: -1, workNumReps: -1, warmUpSets: [] });\n  };\n\n  handlePlateGroupsClear = () => {\n    const { unit } = this.state;\n    let availPlates = { ...this.state.availPlates };\n    availPlates[unit] = availPlates[unit].map(({ value, color }) => ({ value, color, quantity: 0 }));\n    this.setState({ availPlates });\n  };\n\n  resetPrevLoad = () => {\n    this.setState({ prevCalcdLoad: -1 });\n  };\n\n  handleTogglePercentage = index => {\n    const percentages = [...this.state.percentages];\n    percentages[index].on = !percentages[index].on;\n    this.setState({ percentages });\n    const { workWeight, workNumReps } = this.state;\n    if (workWeight > 0 && workNumReps > 0) this.updateWarmUpSets(workWeight, workNumReps);\n\n    // const percentagesExpanded = percentages.filter(p => p.on === true).map(p => p.value);\n    // console.log(percentagesExpanded);\n\n    // const ogWarmUpSets = [...this.state.warmUpSets];\n    // console.log('ogWarmUpSets:',ogWarmUpSets);\n\n    // const warmUpSets = [];\n    // ogWarmUpSets.forEach(set => {\n    //   if (percentagesExpanded.includes(set.percentage)) warmUpSets.push({ ...set });\n    // });\n    // console.log('warmUpSets:',warmUpSets);\n\n    // this.setState({ warmUpSets });\n  };\n}\n\nexport default App;\n","export const calcBgColor = input => {\r\n  if (input % 6 === 0) return 'black';\r\n  if (input % 5 === 0) return 'yellow';\r\n  if (input % 4 === 0) return 'red';\r\n  if (input % 3 === 0) return 'purple';\r\n  if (input % 2 === 0) return 'green';\r\n  return 'cyan';\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}