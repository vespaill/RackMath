{"version":3,"sources":["icons/fire.png","icons/cog.png","components/icons/barbell.jsx","components/icons/plate.jsx","components/icons/info.jsx","components/icons/fire.jsx","components/navBar.jsx","components/invPlateGroup.jsx","components/common/header.jsx","components/inventory.jsx","components/common/notFound.jsx","components/loaderForm.jsx","components/loadValue.jsx","components/loadDiagram.jsx","utils/limitPlateHeight.js","components/loader.jsx","components/icons/cog.jsx","components/setsCalcForm.jsx","components/setContainer.jsx","components/setsCalculator.jsx","components/about.jsx","utils/rampUps.js","utils/plates.js","App.js","utils/calcBgColor.js","serviceWorker.js","index.js"],"names":["module","exports","Barbell","className","Icon","Fire","src","fireIcon","alt","NavBar","navLinks","url","pathname","from","component","commonProps","activeClassName","replace","map","index","key","to","InvPlateGroup","props","value","quantity","bgColor","onClick","style","opacity","Header","children","textJustify","React","Children","count","Row","child","Fragment","Inventory","unit","barbell","availPlates","onUnitClick","onPlateGroupClick","onClear","variant","e","minWidth","plate","color","plateGroupProps","Col","xs","NotFound","LoaderForm","Form","onSubmit","InputGroup","FormControl","type","name","placeholder","aria-label","min","step","onFocus","currentTarget","select","Append","Text","Button","btnText","LoadValue","prevCalcdLoad","calcdLoad","id1","shortid","generate","id2","LoadDiagram","barbellWeight","calcdPlates","loadValProps","left","height","min_px","max_px","Loader","resetPrevLoad","formProps","diagramProps","useLocation","useEffect","width","Cog","cogIcon","SetsCalcForm","formControlProps","maxWeight","max","defaultValue","SetContainer","percentage","weight","numReps","isWorkingSet","workSetClass","Math","round","SetsCalculator","workWeight","workNumReps","warmUpSets","contProps","onLoad","workWeightContProps","href","target","set","additionalProps","About","textAlign","roundToNearestStep","load","remainder","dividend","roundToNearestStepHelper","calcRampUpReps","workingNumSets","calculatePlates","targetLoad","barLoad","plateObjs","dif","abs","lightestPlate","reduce","prev","cur","success","warn","roundOff","amount","up","combinations","findAllValidCombs","length","bestCombination","findBestComb","roundOffAmount","cpyPlateObjs","subsets","calcSubsets","subsetCpy","plateGroup","isValidComb","push","shift","coyPlateObjs","i","nextLoad","minRoundOff","combsMinRoundOff","comb","filter","minNumPlates","prevHeaviestPlate","curHeaviestPlate","acc","bitSet","subset","j","withinRange","input","modQuantity","modifier","App","state","lbs","kg","percentages","handleUnitClick","setState","classList","add","remove","handlePlateGroupClick","findIndex","element","handleLoadSubmit","preventDefault","firstElementChild","blur","handleLoad","loadInput","avlPltsOneSide","maxLoad","toast","error","handleWorkSetSubmit","querySelectorAll","forEach","elem","numRepsInput","lightestPlateAvail","handlePlateGroupsClear","this","loaderProps","invProps","setsCalcProps","toastProps","autoClose","hideProgressBar","pauseOnFocusLoss","draggable","pauseOnHover","newestOnTop","paddingBottom","path","render","exact","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0f363d07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fire.fe489d1d.png\";","module.exports = __webpack_public_path__ + \"static/media/cog.f959e642.png\";","import React from 'react';\r\nimport '../../css/icons/barbell.css';\r\n\r\nconst Barbell = () => {\r\n  return (\r\n    <div className=\"barbell-icon\">\r\n      <div className=\"barbell\">\r\n        <div className=\"barbell__shaft\"></div>\r\n        <div className=\"plate-group--1\">\r\n          <div className=\"plate-group__plate--small\"></div>\r\n          <div className=\"plate-group__plate--med\"></div>\r\n          <div className=\"plate-group__plate--large\"></div>\r\n        </div>\r\n        <div className=\"plate-group--2\">\r\n          <div className=\"plate-group__plate--small\"></div>\r\n          <div className=\"plate-group__plate--med\"></div>\r\n          <div className=\"plate-group__plate--large\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Barbell;\r\n","import React from 'react';\r\nimport '../../css/icons/plate.css';\r\n\r\nconst Barbell = () => {\r\n  return (\r\n    <div className=\"plate-icon\">\r\n      <div className=\"plate__outline\"></div>\r\n      <div className=\"plate__circle\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Barbell;\r\n","import React from 'react';\r\nimport '../../css/icons/info.css';\r\n\r\nconst Icon = () => (\r\n  <div className=\"info-icon\">\r\n    <div>i</div>\r\n  </div>\r\n);\r\n\r\nexport default Icon;\r\n","import React from 'react';\r\nimport fireIcon from '../../icons/fire.png'\r\nimport '../../css/icons/fire.css'\r\n\r\nconst Fire = () => {\r\n  return <img className=\"fire-icon\" src={fireIcon} alt=\"fire\" />;\r\n};\r\n\r\nexport default Fire;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../css/navBar.css';\r\nimport Barbell from './icons/barbell';\r\nimport Plate from './icons/plate';\r\nimport Info from './icons/info';\r\nimport Fire from './icons/fire';\r\n\r\nconst NavBar = () => {\r\n  const navLinks = [\r\n    { url: { pathname: '/home', from: 'navBar' }, component: <Barbell /> },\r\n    { url: '/warmup', component: <Fire /> },\r\n    { url: '/inventory', component: <Plate /> },\r\n    { url: '/about', component: <Info /> }\r\n  ];\r\n  const commonProps = { className: 'nav-item', activeClassName: 'active-class', replace: true };\r\n  return (\r\n    <nav className=\"bg-red navbar fixed-bottom d-flex justify-content-between\">\r\n      {navLinks.map(({ url, component }, index) => (\r\n        <NavLink key={index} {...commonProps} to={url}>\r\n          {component}\r\n        </NavLink>\r\n      ))}\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\n\r\nconst InvPlateGroup = props => {\r\n  const { value, quantity, bgColor, onClick } = props;\r\n\r\n  return (\r\n    <div className=\"plate-group text-center\">\r\n      <button onClick={() => onClick(value)} className={'plate-group__plate' + (quantity ? ' bg-' + bgColor : '')}>\r\n        <span className=\"center-vertically\">{value}</span>\r\n      </button>\r\n      <div className=\"plate-group__quantity\" style={{ opacity: quantity > 0 ? '100%' : '0' }}>\r\n        <span className=\"center-vertically unselectable\">{quantity}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvPlateGroup;\r\n","import React from 'react';\r\nimport { Row } from 'react-bootstrap';\r\n\r\nconst Header = ({ children }) => {\r\n  const textJustify = React.Children.count(children) > 1 ? 'between' : 'center';\r\n\r\n  return (\r\n    <Row className={`my-1 mx-3 d-flex justify-content-${textJustify}`}>\r\n      {React.Children.map(children, child => (\r\n        <React.Fragment>{child}</React.Fragment>\r\n      ))}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport InvPlateGroup from './invPlateGroup';\r\nimport Header from './common/header';\r\nimport '../css/inventory.css';\r\n\r\nconst Inventory = props => {\r\n  const { unit, barbell, availPlates, onUnitClick, onPlateGroupClick, onClear } = props;\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <h1>Unit</h1>\r\n        <button className=\"btn-unit\" variant=\"danger\" onClick={e => onUnitClick(e)}>\r\n          {unit}\r\n        </button>\r\n      </Header>\r\n      <Header>\r\n        <h1>Barbell</h1>\r\n        <h1>{barbell[unit]}</h1>\r\n      </Header>\r\n      <Header>\r\n        <h1>Available plates</h1>\r\n      </Header>\r\n      <Row style={{ minWidth: '300px' }}>\r\n        {availPlates[unit].map((plate, index) => {\r\n          const { value, color, quantity } = plate;\r\n          const plateGroupProps = { onClick: onPlateGroupClick, value, quantity, bgColor: color };\r\n          return (\r\n            <Col key={index} xs={4}>\r\n              <InvPlateGroup {...plateGroupProps} />\r\n            </Col>\r\n          );\r\n        })}\r\n        <Col xs={4}>\r\n          <div className=\"btn-clear-container text-center\">\r\n            <button className=\"btn-clear\" onClick={() => onClear()}>\r\n              <span className=\"center-vertically\">clear</span>\r\n            </button>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Inventory;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n  return <h1>Not Found</h1>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport { Form, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../css/loadForm.css';\r\n\r\nconst LoaderForm = props => {\r\n  return (\r\n    <Form onSubmit={e => props.onSubmit(e)}>\r\n      <InputGroup>\r\n        <FormControl\r\n          className=\"text-right\"\r\n          type=\"number\"\r\n          name=\"loadInput\"\r\n          placeholder={props.placeholder}\r\n          aria-label=\"weight\"\r\n          min=\"0\"\r\n          step=\"0.5\"\r\n          onFocus={e => { e.currentTarget.select(); }}\r\n        />\r\n        <InputGroup.Append>\r\n          <InputGroup.Text className=\"weight-input__text\">\r\n            {props.unit}\r\n          </InputGroup.Text>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n      <div>\r\n        <Button className=\"mx-auto d-block\" variant=\"dark\" type=\"submit\">\r\n          {props.btnText}\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default LoaderForm;\r\n","import React from 'react';\r\nimport '../css/loadValue.css';\r\nimport shortid from 'shortid';\r\n\r\nconst LoadValue = props => {\r\n  const { prevCalcdLoad, calcdLoad, unit } = props;\r\n\r\n  const id1 = shortid.generate();\r\n  const id2 = shortid.generate();\r\n\r\n  return (\r\n    <div className=\"load-value center-vertically\">\r\n      {prevCalcdLoad > -1 && (\r\n        <div key={id1} className=\"load-value__prev badge badge-success animate-leave\">\r\n          {`${prevCalcdLoad} ${unit}`}\r\n        </div>\r\n      )}\r\n      {calcdLoad > -1 && (\r\n        <div key={id2} className=\"load-value__cur badge badge-success animate-enter\">\r\n          {`${calcdLoad} ${unit}`}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadValue;\r\n","import React from 'react';\r\nimport { limitPlateHeight } from '../utils/limitPlateHeight';\r\nimport '../css/loadDiagram.css';\r\nimport LoadValue from './loadValue';\r\n\r\nconst LoadDiagram = props => {\r\n  const { unit, barbellWeight, calcdPlates, calcdLoad, prevCalcdLoad } = props;\r\n  const loadValProps = { unit, calcdLoad, prevCalcdLoad };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"load\">\r\n        <div className=\"load__barbell--shaft\">\r\n          <div>{barbellWeight}</div>\r\n        </div>\r\n        <div className=\"load__barbell--sleeve-threshold\" />\r\n        <div className=\"load__plate-group\">\r\n          <div style={{ opacity: '0px' }} className=\"plate-container\" />\r\n          {calcdPlates.map((plate, index) => (\r\n            <div key={index} className=\"plate-container\" style={{ left: `${index * 32 + 32}px` }}>\r\n              <div\r\n                className={`plate-container__plate center-vertically bg-${plate.color}`}\r\n                style={{ height: `${limitPlateHeight(plate.value * 7, 45, 315)}px` }}\r\n              />\r\n              <div className=\"plate-container__plate--text center-vertically\">{plate.value}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <LoadValue {...loadValProps} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoadDiagram;\r\n","export const limitPlateHeight = (height, min_px, max_px) => {\r\n  if (height >= max_px) return max_px;\r\n  if (height <= min_px) return min_px;\r\n  return height;\r\n};","import React, { useEffect } from 'react';\r\nimport Header from './common/header';\r\nimport LoaderForm from './loaderForm';\r\nimport LoadDiagram from './loadDiagram';\r\nimport { useLocation, Redirect } from 'react-router-dom';\r\n\r\nconst Loader = props => {\r\n  const { unit, barbellWeight, calcdPlates, calcdLoad, prevCalcdLoad, onSubmit, resetPrevLoad } = props;\r\n  const formProps = { unit, onSubmit };\r\n  const diagramProps = { unit, barbellWeight, calcdPlates, calcdLoad, prevCalcdLoad };\r\n  const { from } = useLocation();\r\n\r\n  // Similar to componentDidMount and componentDidUpdate:\r\n  useEffect(() => {\r\n    if (from === 'navBar') resetPrevLoad();\r\n  }, [from, resetPrevLoad]);\r\n\r\n  return (from === 'navBar') ? (\r\n    <Redirect to=\"/home\" />\r\n  ) : (\r\n    <>\r\n      <Header>\r\n        <h1>Barbell Loader</h1>\r\n      </Header>\r\n      <LoaderForm {...formProps} placeholder=\"Enter Weight\" btnText=\"Load\" />\r\n      <LoadDiagram {...diagramProps} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport cogIcon from '../../icons/cog.png';\r\n\r\nconst style = { width: '100%' };\r\nconst Cog = () => <img className=\"cog-icon\" style={style} src={cogIcon} alt=\"cog\" />;\r\n\r\nexport default Cog;\r\n","import React from 'react';\r\nimport { Form, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport Cog from './icons/cog';\r\nimport '../css/loadForm.css';\r\n\r\nconst SetsCalcForm = props => {\r\n  const formControlProps = {\r\n    type: 'number',\r\n    min: '0',\r\n    onFocus: e => {\r\n      e.currentTarget.select();\r\n    }\r\n  };\r\n  const maxWeight = props.unit === 'kg' ? 2840 : 7000;\r\n\r\n  return (\r\n    <Form onSubmit={e => props.onSubmit(e)}>\r\n      <InputGroup>\r\n        <FormControl name=\"loadInput\" placeholder=\"weight\" step=\"0.5\" max={maxWeight} {...formControlProps} />\r\n        <InputGroup.Append>\r\n          <InputGroup.Text>{props.unit} × </InputGroup.Text>\r\n        </InputGroup.Append>\r\n        <FormControl name=\"numRepsInput\" placeholder=\"reps\" max=\"999\" step=\"1\" defaultValue=\"5\" {...formControlProps} />\r\n      </InputGroup>\r\n      <div className=\"button-group\">\r\n        <Button className=\"calc-btn\" type=\"submit\" variant=\"dark\">\r\n          {props.btnText}\r\n        </Button>\r\n        <Button className=\"settings-btn\" variant=\"dark\">\r\n          <Cog />\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default SetsCalcForm;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'react-bootstrap';\r\nimport '../css/setContainer.css';\r\n\r\nconst SetContainer = props => {\r\n  const { unit, percentage, weight, numReps, isWorkingSet, btnText } = props;\r\n  const workSetClass = isWorkingSet ? ' working-weight' : '';\r\n\r\n  return (\r\n    <div className={'set-container d-flex justify-content-between' + workSetClass}>\r\n      <div className=\"percent-container\">\r\n        <span className=\"percentage badge badge-warning\">{Math.round(percentage * 100)}%</span>\r\n      </div>\r\n      <span className=\"set\">{`${weight} ${unit} × ${numReps}`}</span>\r\n      <Link to=\"/home\">\r\n        <Button className=\"btn btn-dark\" onClick={() => props.onClick(weight)}>\r\n          {btnText}\r\n        </Button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SetContainer;\r\n","import React from 'react';\r\nimport SetsCalcForm from './setsCalcForm';\r\nimport SetContainer from './setContainer';\r\nimport '../css/setsCalculator.css';\r\nimport Header from './common/header';\r\n\r\nconst SetsCalculator = props => {\r\n  const { workWeight, workNumReps, warmUpSets, unit, onSubmit, onLoad } = props;\r\n  const contProps = { unit, onClick: onLoad };\r\n  const workWeightContProps = {\r\n    percentage: 1,\r\n    weight: workWeight,\r\n    numReps: workNumReps,\r\n    isWorkingSet: true,\r\n    btnText: 'Start'\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <a href=\"https://www.t-nation.com/training/most-intelligent-way-to-warm-up\" target=\"#blank\">\r\n          <h1>Warm Up Sets Calculator</h1>\r\n        </a>\r\n      </Header>\r\n      <SetsCalcForm unit={unit} onSubmit={onSubmit} btnText='Calculate' />\r\n      <div className=\"setList-container\">\r\n        <div className=\"setList mx-auto\">\r\n          {warmUpSets.map((set, index) => {\r\n            const { percentage, weight, numReps } = set;\r\n            const additionalProps = { percentage, weight, numReps };\r\n            return <SetContainer key={index} btnText=\"Load\" {...contProps} {...additionalProps} />;\r\n          })}\r\n          {workWeight !== -1 && <SetContainer {...contProps} {...workWeightContProps} />}\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"popup\" id=\"popup\"></div> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SetsCalculator;\r\n","import React from 'react';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div\r\n      className=\"center-vertically\"\r\n      style={{\r\n        textAlign: 'justify'\r\n      }}\r\n    >\r\n      Barbell Loader was inspired by{' '}\r\n      <a target=\"#blank\" href=\"https://www.happyliftingco.com/pages/rackmath\">RackMath</a> and\r\n      built from scratch by Victor Espaillat with the help of React.js and\r\n      Bootstrap.\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","const roundToNearestStepHelper = (load, barbell, step) => {\r\n  const remainder = (load - barbell) % step;\r\n  const dividend = load - remainder;\r\n  return remainder >= step / 2 ? dividend + step : dividend;\r\n};\r\n\r\nconst roundToNearestStep = (load, barbell, step) => Math.round(roundToNearestStepHelper(load, barbell, step));\r\n\r\nconst calcRampUpReps = (percentage, workingNumSets) => {\r\n  const numReps = Math.round(workingNumSets * (2 - 4 * (percentage - 0.5)));\r\n  return numReps > 0 ? numReps : 1;\r\n};\r\n\r\nexport { roundToNearestStep, calcRampUpReps };\r\n","const MAX_PLATES = 8;\r\n\r\n/**\r\n *\r\n * @param {Number} targetLoad The desired weight to load onto the barbell.\r\n * @param {Number} barLoad The weight value of the barbell.\r\n * @param {Object[]} plateObjs Array of plate objects.\r\n * @param {Number} plateObjs[].value The weight value of the plate.\r\n * @param {String} plateObjs[].color The color of the plate.\r\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\r\n */\r\nconst calculatePlates = (targetLoad, barLoad, plateObjs) => {\r\n  const success = true;\r\n  const dif = Math.abs(targetLoad - barLoad);\r\n  const lightestPlate = plateObjs.reduce((prev, cur) => (prev.value < cur.value ? prev : cur)).value;\r\n\r\n  if (dif === 0) return { success, warn: 'justbar', calcdLoad: barLoad, calcdPlates: [] };\r\n  else if (dif <= lightestPlate)\r\n    return { success, warn: 'roundoff', calcdLoad: barLoad, calcdPlates: [], roundOff: { amount: dif, up: false } };\r\n\r\n  const combinations = findAllValidCombs(targetLoad, barLoad, plateObjs);\r\n  if (combinations.length === 0) return { success: false, warn: 'notEnoughRoom' };\r\n  const bestCombination = findBestComb(combinations);\r\n  const { calcdLoad, calcdPlates, roundOff: roundOffAmount } = bestCombination;\r\n\r\n  let warn, roundOff;\r\n  if (roundOffAmount) {\r\n    warn = 'roundoff';\r\n    roundOff = { amount: roundOffAmount, up: calcdLoad > targetLoad };\r\n  }\r\n\r\n  return { success, calcdLoad, calcdPlates, roundOff, warn };\r\n};\r\n\r\n/**\r\n * Using the given plate objects, finds all the possible and valid plate\r\n * combinations that meet the desired target load with reasonable round off.\r\n * @param {Number} targetLoad The desired weight to load onto the barbell.\r\n * @param {Number} barLoad The weight value of the barbell.\r\n * @param {Object[]} plateObjs Array of plate objects.\r\n * @param {Number} plateObjs[].value The weight value of the plate.\r\n * @param {String} plateObjs[].color The color of the plate.\r\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\r\n */\r\nconst findAllValidCombs = (targetLoad, barLoad, plateObjs) => {\r\n  // console.log('available plates:', availPlates);\r\n  let cpyPlateObjs = plateObjs.map(plate => ({ ...plate }));\r\n  let combinations = [];\r\n  let subsets = calcSubsets(cpyPlateObjs); // array of arrays of plateGroups\r\n  // console.log('all subsets of available plates:', subsets);\r\n\r\n  for (let subset of subsets) {\r\n    let subsetCpy = subset.map(plateGroup => ({ ...plateGroup })); // arrays of plateGroups\r\n    while (subsetCpy.length > 0) {\r\n      let { success, calcdLoad, calcdPlates, roundOff } = isValidComb(targetLoad, barLoad, subsetCpy);\r\n      if (success) combinations.push({ calcdLoad, calcdPlates, roundOff });\r\n      subsetCpy[0].quantity--;\r\n      if (subsetCpy[0].quantity <= 0) subsetCpy.shift();\r\n    }\r\n  }\r\n  // console.log('combinations:', combinations);\r\n  return combinations;\r\n};\r\n\r\n/**\r\n * Determines whether it is possible to load a target weight onto a barbell,\r\n * given an array containing a finite number of plate objects, with a reasonable\r\n * amount of round off allowed.\r\n * If so, returns the calculated plate objects array.\r\n * @param {Number} targetLoad The desired weight to load onto the barbell.\r\n * @param {Number} barLoad The weight value of the barbell.\r\n * @param {Object[]} plateObjs Array of plate objects.\r\n * @param {Number} plateObjs[].value The weight value of the plate.\r\n * @param {String} plateObjs[].color The color of the plate.\r\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\r\n */\r\nconst isValidComb = (targetLoad, barLoad, plateObjs) => {\r\n  let coyPlateObjs = plateObjs.map(plate => ({ ...plate }));\r\n  let calcdLoad = barLoad;\r\n  const calcdPlates = [];\r\n  const lightestPlate = plateObjs.reduce((prev, cur) => (prev.value < cur.value ? prev : cur)).value;\r\n\r\n  for (let plateGroup of coyPlateObjs) {\r\n    let { value, color, quantity } = plateGroup;\r\n    for (let i = 0; i < quantity; ++i) {\r\n      const nextLoad = value * 2;\r\n      const dif = Math.abs(targetLoad - (calcdLoad + nextLoad));\r\n      if (calcdLoad + nextLoad < targetLoad || dif < lightestPlate) {\r\n        calcdLoad += nextLoad;\r\n        calcdPlates.push({ value, color });\r\n        if (calcdPlates.length > MAX_PLATES) return { success: false };\r\n        plateGroup.quantity--;\r\n      }\r\n    }\r\n  }\r\n  const roundOff = Math.abs(targetLoad - calcdLoad);\r\n  const heaviestPlate = plateObjs.reduce((prev, cur) => (prev.value > cur.value ? prev : cur)).value;\r\n  // Only return success if roundOff is reasonable.\r\n  if (roundOff > heaviestPlate * 2) return { success: false };\r\n  return { success: true, calcdLoad, calcdPlates, roundOff };\r\n};\r\n\r\n/**\r\n * Given an array of possible plate combinations, returns the best one. That is,\r\n * one with the least amount of round off, with the least number of plates\r\n * possible, and one which favors heavier plates first.\r\n * @param {Object[]} combinations\r\n * @param {Number} combinations[].roundOff\r\n * @param {Number} combinations[].caldLoad The sum of every plate value in calcdPlate[].\r\n * @param {Object[]} combinations[].calcdPlates an array of plate objects with no quantity prop, but instead allowing duplicates.\r\n * @param {Number} combinations[].calcdPlates[].value The weight value of the plate.\r\n * @param {String} combinations[].calcdPlates[].color The color of the plate.\r\n */\r\nconst findBestComb = combinations => {\r\n  // console.log('combinations:', combinations);\r\n  const minRoundOff = combinations.reduce((prev, cur) => (prev.roundOff < cur.roundOff ? prev : cur)).roundOff;\r\n  const combsMinRoundOff = combinations.map(comb => ({ ...comb })).filter(comb => comb.roundOff === minRoundOff);\r\n  const minNumPlates = combsMinRoundOff.reduce((prev, cur) =>\r\n    prev.calcdPlates.length < cur.calcdPlates.length ? prev : cur\r\n  ).calcdPlates.length;\r\n  const combsMinNumPlates = combsMinRoundOff\r\n    .map(comb => ({ ...comb }))\r\n    .filter(comb => comb.calcdPlates.length === minNumPlates);\r\n  const combsHeaviestPlates = combsMinNumPlates.reduce((prev, cur) => {\r\n    const prevHeaviestPlate = prev.calcdPlates.reduce((prev, cur) => (prev.value > cur.value ? prev : cur)).value;\r\n    const curHeaviestPlate = cur.calcdPlates.reduce((prev, cur) => (prev.value > cur.value ? prev : cur)).value;\r\n    if (prevHeaviestPlate === curHeaviestPlate) {\r\n      const prevHeaviestCount = prev.calcdPlates.reduce(\r\n        (acc, cur) => (cur.value === prevHeaviestPlate ? acc + 1 : acc),\r\n        0\r\n      );\r\n      const curHeaviestPlate = cur.calcdPlates.reduce(\r\n        (acc, cur) => (cur.value === prevHeaviestPlate ? acc + 1 : acc),\r\n        0\r\n      );\r\n      return prevHeaviestCount > curHeaviestPlate ? prev : cur;\r\n    }\r\n    return prevHeaviestPlate > curHeaviestPlate ? prev : cur;\r\n  });\r\n  // console.log('least round off:', combsMinRoundOff);\r\n  // console.log('least number of plates:', combsMinNumPlates);\r\n  // console.log('favorsHeavierPlates:', combsHeaviestPlates);\r\n  return combsHeaviestPlates;\r\n};\r\n\r\n/**\r\n * Returns an array containing all sub-arrays (subsets) of a given array of\r\n * objects.\r\n * @param {Object[]} set An array of objects.\r\n */\r\nconst calcSubsets = set => {\r\n  let numSubsets = 1 << set.length; // 2^n\r\n  let subsets = [];\r\n\r\n  for (let bitSet = numSubsets - 1; bitSet >= 0; --bitSet) {\r\n    let subset = [];\r\n    // Iterate through the bitSet. Checking each bit.\r\n    for (let j = 0; j < set.length; ++j) {\r\n      // If the bit at position j is turned on in the bit set, push element j.\r\n      if ((bitSet & (1 << j)) > 0) subset.push({ ...set[j] });\r\n    }\r\n    if (subset.length > 0) subsets.push(subset); // Push subset into list of all subsets.\r\n  }\r\n  return subsets;\r\n};\r\n\r\n/**\r\n * Determines whether a given input falls within the range of the given min and max.\r\n * @param {Number} input\r\n * @param {Number} min\r\n * @param {Number} max\r\n */\r\nconst withinRange = (input, min, max) => input >= min && input <= max;\r\n\r\n/**\r\n * Multiplies the quantity value of each plate object in the given array by the\r\n * given modifier value.\r\n * @param {Object[]} plateObjs Array of plate objects.\r\n * @param {Number} plateObjs[].value The weight value of the plate.\r\n * @param {String} plateObjs[].color The color of the plate.\r\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\r\n */\r\nconst modQuantity = (plateObjs, modifier) => {\r\n  return plateObjs\r\n    .filter(({ quantity }) => quantity > 0)\r\n    .map(plate => {\r\n      const { value, color, quantity } = plate;\r\n      return { value, color, quantity: quantity * modifier };\r\n    });\r\n};\r\n\r\nexport { MAX_PLATES, modQuantity, withinRange, calculatePlates };\r\n","import React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport NavBar from './components/navBar';\nimport Inventory from './components/inventory';\nimport NotFound from './components/common/notFound';\nimport Loader from './components/loader';\nimport SetsCalculator from './components/setsCalculator';\nimport About from './components/about';\nimport { roundToNearestStep, calcRampUpReps } from './utils/rampUps';\nimport { calcBgColor } from './utils/calcBgColor';\nimport { MAX_PLATES, modQuantity, withinRange, calculatePlates } from './utils/plates';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './css/App.css';\nimport './css/utils.css';\nimport './css/toastify.css';\n\nclass App extends Component {\n  state = {\n    // Inventory related\n    unit: 'lbs',\n    barbell: { lbs: 45, kg: 20 },\n    availPlates: {\n      lbs: [\n        { value: 100, quantity: 0 },\n        { value: 65, quantity: 0 },\n        { value: 55, quantity: 0 },\n        { value: 50, quantity: 0 },\n        { value: 45, quantity: MAX_PLATES },\n        { value: 35, quantity: 0 },\n        { value: 30, quantity: 0 },\n        { value: 25, quantity: MAX_PLATES },\n        { value: 20, quantity: 0 },\n        { value: 15, quantity: 0 },\n        { value: 12.5, quantity: 0 },\n        { value: 10, quantity: MAX_PLATES },\n        { value: 7.5, quantity: 0 },\n        { value: 5, quantity: MAX_PLATES },\n        { value: 2.5, quantity: MAX_PLATES },\n        { value: 1.25, quantity: 0 },\n        { value: 1, quantity: 0 },\n        { value: 0.75, quantity: 0 },\n        { value: 0.5, quantity: 0 },\n        { value: 0.25, quantity: 0 }\n      ],\n      kg: [\n        { value: 50, quantity: 0 },\n        { value: 45, quantity: 0 },\n        { value: 35, quantity: 0 },\n        { value: 30, quantity: 0 },\n        { value: 25, quantity: 0 },\n        { value: 20, quantity: MAX_PLATES },\n        { value: 15, quantity: 0 },\n        { value: 12.5, quantity: 0 },\n        { value: 10, quantity: MAX_PLATES },\n        { value: 7.5, quantity: 0 },\n        { value: 5, quantity: MAX_PLATES },\n        { value: 3, quantity: 0 },\n        { value: 2.5, quantity: MAX_PLATES },\n        { value: 2, quantity: 0 },\n        { value: 1.5, quantity: 0 },\n        { value: 1.25, quantity: MAX_PLATES },\n        { value: 1, quantity: 0 },\n        { value: 0.75, quantity: 0 },\n        { value: 0.5, quantity: 0 },\n        { value: 0.25, quantity: 0 }\n      ]\n    },\n    calcdPlates: [],\n    calcdLoad: -1,\n    prevCalcdLoad: -1,\n\n    // Warm Up related\n    percentages: [0.5, 0.6, 0.7, 0.8, 0.9, 1.1],\n    workWeight: -1,\n    workNumReps: -1,\n    warmUpSets: [\n      /* {percentage, weight, numReps}, ... */\n    ]\n  };\n\n  componentDidMount() {\n    let availPlates = {};\n    // Give plates a color property.\n    ['lbs', 'kg'].forEach(unit => {\n      availPlates[unit] = this.state.availPlates[unit].map((plate, index) => ({\n        ...plate,\n        color: calcBgColor(index)\n      }));\n    });\n    this.setState({ availPlates });\n  }\n\n  render() {\n    const { unit, barbell, availPlates, calcdPlates, calcdLoad, prevCalcdLoad, workWeight, workNumReps, warmUpSets } = this.state;\n    const loaderProps = { unit, barbellWeight: barbell[unit], calcdPlates, calcdLoad, prevCalcdLoad, onSubmit: this.handleLoadSubmit, resetPrevLoad: this.resetPrevLoad };\n    const invProps = { unit, barbell, availPlates, onPlateGroupClick: this.handlePlateGroupClick, onUnitClick: this.handleUnitClick, onClear: this.handlePlateGroupsClear };\n    const setsCalcProps = { unit, workWeight, workNumReps, warmUpSets, onSubmit: this.handleWorkSetSubmit, onLoad: this.handleLoad };\n    const toastProps = { /* limit: 1, */ autoClose: 2000, hideProgressBar: true, pauseOnFocusLoss: false, draggable: false, pauseOnHover: false, newestOnTop: true };\n    return (\n      <>\n        <div className=\"container\" style={{ paddingBottom: '70px' }}>\n          <ToastContainer {...toastProps} />\n          <Switch>\n            <Route path=\"/home\" render={() => <Loader {...loaderProps} />} />\n            <Route path=\"/inventory\" render={() => <Inventory {...invProps} />} />\n            <Route path=\"/warmup\" render={() => <SetsCalculator {...setsCalcProps} />} />\n            <Route path=\"/about\" component={About}></Route>\n            <Route path=\"/not-found\" component={NotFound} />\n            <Redirect from=\"/\" exact to=\"/home\" />\n            <Redirect to=\"/not-found\" />\n          </Switch>\n        </div>\n        <NavBar />\n      </>\n    );\n  }\n\n  handleUnitClick = e => {\n    let { unit } = this.state;\n    if (unit === 'lbs') unit = 'kg';\n    else unit = 'lbs';\n    this.setState({ unit, calcdPlates: [], calcdLoad: -1, prevCalcdLoad: -1, workWeight: -1, warmUpSets: [] });\n    e.currentTarget.classList.add('animate-wiggle');\n    e.currentTarget.classList.remove('animate-wiggle');\n  };\n\n  handlePlateGroupClick = value => {\n    const { unit } = this.state;\n    const availPlates = { ...this.state.availPlates };\n    const i = availPlates[unit].findIndex(element => element.value === value);\n    availPlates[unit][i].quantity = (availPlates[unit][i].quantity + 2) % (MAX_PLATES + 2);\n    this.setState({ availPlates, calcdPlates: [], calcdLoad: -1, prevCalcdLoad: -1 });\n  };\n\n  handleLoadSubmit = e => {\n    e.preventDefault();\n    // Blur in order to hide keyboard on mobile.\n    e.currentTarget.firstElementChild.firstElementChild.blur();\n    this.handleLoad(e.currentTarget.loadInput.value);\n    // e.currentTarget.loadInput.value = '';\n  };\n\n  handleLoad = load => {\n    const { unit } = this.state;\n    const barLoad = this.state.barbell[unit];\n    let avlPltsOneSide = modQuantity([...this.state.availPlates[unit]], 0.5);\n    const prevCalcdLoad = this.state.calcdLoad;\n    const maxLoad = barLoad + 2 * avlPltsOneSide.reduce((acc, cur) => acc + cur.value * cur.quantity, 0);\n\n    if (!withinRange(load, barLoad, maxLoad)) {\n\n      this.setState({ calcdPlates: [], calcdLoad: -1, prevCalcdLoad });\n      if (load < barLoad) toast.error(\"That's not even the bar!\");\n      else if (load > maxLoad) toast.error('Exceeded maximum allowed by inventory!');\n\n    } else {\n      const { success, warn, calcdLoad, calcdPlates, roundOff } = calculatePlates(load, barLoad, avlPltsOneSide);\n\n      if (warn === 'justbar') toast.success('Just the bar!');\n      else if (warn === 'roundoff') toast.warn(`Inventory limitation—Load rounded ${roundOff.up ? 'up' : 'down'} by ${roundOff.amount} ${unit}.`);\n      else if (warn === 'notEnoughRoom') toast.error('Too many plates to fit on barbell!');\n\n      if (success) this.setState({ calcdPlates, calcdLoad, prevCalcdLoad });\n      else this.setState({ calcdPlates: [], calcdLoad: -1, prevCalcdLoad });\n    }\n  };\n\n  handleWorkSetSubmit = e => {\n    e.preventDefault();\n    e.currentTarget.firstElementChild.querySelectorAll('input').forEach(elem => { elem.blur(); });\n    const { value: workWeight } = e.currentTarget.loadInput;\n    const { value: workNumReps } = e.currentTarget.numRepsInput;\n    if (workWeight && workNumReps) {\n      const warmUpSets = [];\n      const { percentages, unit, barbell, availPlates } = this.state;\n      const barbellWeight = barbell[unit];\n      const lightestPlateAvail = availPlates[unit].filter(plate => plate.quantity > 0).map(plate => plate.value).reduce((prev, cur) => (prev < cur ? prev : cur));\n      // console.log('handleWorkSetSubmit(): lightestPlate =', lightestPlateAvail);\n      percentages.forEach(percentage => {\n        const weight = roundToNearestStep(workWeight * percentage, barbellWeight, lightestPlateAvail * 2);\n        const numReps = calcRampUpReps(percentage, workNumReps)\n        warmUpSets.push({ percentage, weight, numReps });\n      });\n      this.setState({ workWeight, workNumReps, warmUpSets });\n    } else this.setState({ workWeight: -1, workNumReps: -1, warmUpSets: [] });\n  };\n\n  handlePlateGroupsClear = () => {\n    const { unit } = this.state;\n    let availPlates = { ...this.state.availPlates };\n    availPlates[unit] = availPlates[unit].map(({ value, color }) => ({ value, color, quantity: 0 }));\n    this.setState({ availPlates });\n  };\n\n  resetPrevLoad = () => {\n    this.setState({ prevCalcdLoad: -1 });\n  };\n}\n\nexport default App;\n","export const calcBgColor = input => {\r\n  if (input % 6 === 0) return 'black';\r\n  if (input % 5 === 0) return 'yellow';\r\n  if (input % 4 === 0) return 'red';\r\n  if (input % 3 === 0) return 'purple';\r\n  if (input % 2 === 0) return 'green';\r\n  return 'cyan';\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}