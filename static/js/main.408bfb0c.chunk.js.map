{"version":3,"sources":["components/plateGroup.jsx","components/inventory.jsx","components/common/notFound.jsx","App.js","serviceWorker.js","index.js"],"names":["PlateGroup","value","quantity","bgColor","onClick","className","href","style","opacity","calcBgColor","index","input","toKg","lbs","Math","round","Inventory","state","unit","barbell","kg","availablePlates","this","original","findIndex","element","setState","Row","map","plate","Col","key","xs","handlePlateGroupClick","Component","NotFound","App","Container","path","component","from","exact","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.408bfb0c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst PlateGroup = ({ value, quantity, bgColor, onClick }) => {\r\n  return (\r\n    <div className=\"plate-group text-center\">\r\n      <a\r\n        href=\"#0\"\r\n        onClick={onClick}\r\n        className={'plate-group__plate' + (quantity ? bgColor : '')}\r\n      >\r\n        <span className=\"center-vertically\">{value}</span>\r\n      </a>\r\n      <div\r\n        className=\"plate-group__quantity\"\r\n        style={{ opacity: quantity ? '100%' : '0' }}\r\n      >\r\n        <span className=\"center-vertically\">{quantity}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlateGroup;\r\n","import React, { Component } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../css/inventory.css';\r\nimport PlateGroup from './plateGroup';\r\n\r\nconst calcBgColor = index => {\r\n  return (\r\n    ' bg-' +\r\n    (input => {\r\n      if (input % 6 === 0) return 'black';\r\n      if (input % 5 === 0) return 'yellow';\r\n      if (input % 4 === 0) return 'red';\r\n      if (input % 3 === 0) return 'purple';\r\n      if (input % 2 === 0) return 'green';\r\n      return 'cyan';\r\n    })(index)\r\n  );\r\n};\r\n\r\nconst toKg = lbs => Math.round(lbs / 2.20462);\r\n\r\nclass Inventory extends Component {\r\n  state = {\r\n    unit: 'lbs',\r\n    barbell: {\r\n      lbs: 45,\r\n      kg: toKg(45)\r\n    },\r\n    availablePlates: {\r\n      lbs: [\r\n        { value: 100, quantity: 0 },\r\n        { value: 65, quantity: 0 },\r\n        { value: 55, quantity: 0 },\r\n        { value: 50, quantity: 0 },\r\n        { value: 45, quantity: 8 },\r\n        { value: 35, quantity: 0 },\r\n        { value: 25, quantity: 8 },\r\n        { value: 20, quantity: 0 },\r\n        { value: 15, quantity: 0 },\r\n        { value: 12.5, quantity: 0 },\r\n        { value: 10, quantity: 8 },\r\n        { value: 7.5, quantity: 0 },\r\n        { value: 5, quantity: 8 },\r\n        { value: 2.5, quantity: 8 },\r\n        { value: 1.25, quantity: 0 },\r\n        { value: 1, quantity: 0 },\r\n        { value: 0.75, quantity: 0 },\r\n        { value: 0.5, quantity: 0 },\r\n        { value: 0.25, quantity: 0 }\r\n      ],\r\n      kg: [\r\n        { value: 50, quantity: 0 },\r\n        { value: 45, quantity: 0 },\r\n        { value: 35, quantity: 0 },\r\n        { value: 30, quantity: 0 },\r\n        { value: 25, quantity: 0 },\r\n        { value: 20, quantity: 0 },\r\n        { value: 15, quantity: 0 },\r\n        { value: 12.5, quantity: 0 },\r\n        { value: 10, quantity: 0 },\r\n        { value: 7.5, quantity: 0 },\r\n        { value: 5, quantity: 0 },\r\n        { value: 3, quantity: 0 },\r\n        { value: 2.5, quantity: 0 },\r\n        { value: 2, quantity: 0 },\r\n        { value: 1.5, quantity: 0 },\r\n        { value: 1.25, quantity: 0 },\r\n        { value: 1, quantity: 0 },\r\n        { value: 0.75, quantity: 0 },\r\n        { value: 0.5, quantity: 0 },\r\n        { value: 0.25, quantity: 0 }\r\n      ]\r\n    }\r\n  };\r\n\r\n  handlePlateGroupClick(value) {\r\n    const { unit } = this.state;\r\n    const original = { ...this.state.availablePlates };\r\n    const index = original[unit].findIndex(element => element.value === value);\r\n    original[unit][index].quantity = (original[unit][index].quantity + 2) % 10;\r\n\r\n    this.setState({ availablePlates: original });\r\n  }\r\n\r\n  render() {\r\n    const { unit, barbell, availablePlates } = this.state;\r\n    return (\r\n      <>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <h1>Unit</h1>\r\n          <h1>{unit}</h1>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <h1>Barbell</h1>\r\n          <h1>{barbell[unit]}</h1>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-center\">\r\n          <h1>Available plates</h1>\r\n        </Row>\r\n        <Row>\r\n          {availablePlates[unit].map((plate, index) => {\r\n            const { value, quantity } = plate;\r\n            return (\r\n              <Col key={index} xs={4}>\r\n                <PlateGroup\r\n                  onClick={() => this.handlePlateGroupClick(value)}\r\n                  value={value}\r\n                  quantity={quantity}\r\n                  bgColor={calcBgColor(index)}\r\n                />\r\n              </Col>\r\n            );\r\n          })}\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Inventory;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n  return <h1>Not Found</h1>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n// import NavBarBottom from './components/navBarBottom';\nimport './css/App.css';\nimport Inventory from './components/inventory';\nimport NotFound from './components/common/notFound';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container } from 'react-bootstrap';\n\nfunction App() {\n  return (\n    <>\n      <Container>\n        <Switch>\n          {/* <Route path=\"/rackmath\" component={RackMath} /> */}\n          <Route path=\"/inventory\" component={Inventory} />\n          <Route path=\"/not-found\" component={NotFound} />\n          <Redirect from=\"/\" exact to=\"/inventory\" />\n          <Redirect to=\"/not-found\" />\n        </Switch>\n      </Container>\n      {/* <NavBarBottom /> */}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}