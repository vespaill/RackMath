{"version":3,"sources":["components/navBarBottom.jsx","components/invPlateGroup.jsx","components/inventory.jsx","components/common/notFound.jsx","components/loadDiagram.jsx","components/loadForm.jsx","components/plateCalculator.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBarBottom","className","to","InvPlateGroup","value","quantity","bgColor","onClick","href","style","opacity","calcBgColor","index","input","Inventory","props","data","unit","barbell","availablePlates","Row","map","plate","Col","key","xs","NotFound","LoadDiagram","plates","calculatedPlates","plateWeight","height","loadForm","Form","onSubmit","e","InputGroup","FormControl","type","name","placeholder","aria-label","Append","Text","Button","variant","PlateCalculator","toKg","lbs","Math","round","App","state","inventory","kg","handlePlateGroupClick","original","findIndex","element","setState","handleLoadSubmit","preventDefault","load","currentTarget","console","log","filter","val","platesArray","arrayifyInventoryPlates","validateLoad","msg","valid","calculatePlates","loadSuccess","tooExact","array","toast","error","plateFrequencies","j","push","platesOnOneEnd","totalWeightAvailable","reduce","acc","cur","targetLoad","workingLoad","length","sum","prev","Container","paddingBottom","limit","autoClose","hideProgressBar","pauseOnFocusLoss","draggable","pauseOnHover","path","render","component","from","exact","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3f796d5a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../css/navBarBottom.css';\r\n\r\nconst NavBarBottom = () => {\r\n  return (\r\n    <nav className=\"bg-red fixed-bottom navbar navbar-dark\">\r\n      <div className=\"navbar-nav navbar-expand\">\r\n        <NavLink className=\"nav-item nav-link pr-5\" to=\"/rackmath\">\r\n          calc\r\n        </NavLink>\r\n        <NavLink className=\"nav-item nav-link\" to=\"/inventory\">\r\n          inv\r\n        </NavLink>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBarBottom;\r\n","import React from 'react';\r\n\r\nconst InvPlateGroup = ({ value, quantity, bgColor, onClick }) => {\r\n  return (\r\n    <div className=\"plate-group text-center\">\r\n      <a\r\n        href=\"#0\"\r\n        onClick={() => onClick(value)}\r\n        className={'plate-group__plate' + (quantity ? bgColor : '')}\r\n      >\r\n        <span className=\"center-vertically\">{value}</span>\r\n      </a>\r\n      <div\r\n        className=\"plate-group__quantity\"\r\n        style={{ opacity: quantity ? '100%' : '0' }}\r\n      >\r\n        <span className=\"center-vertically\">{quantity}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvPlateGroup;\r\n","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../css/inventory.css';\r\nimport InvPlateGroup from './invPlateGroup';\r\n\r\nconst calcBgColor = index => {\r\n  return (\r\n    ' bg-' +\r\n    (input => {\r\n      if (input % 6 === 0) return 'black';\r\n      if (input % 5 === 0) return 'yellow';\r\n      if (input % 4 === 0) return 'red';\r\n      if (input % 3 === 0) return 'purple';\r\n      if (input % 2 === 0) return 'green';\r\n      return 'cyan';\r\n    })(index)\r\n  );\r\n};\r\n\r\nconst Inventory = props => {\r\n  const { unit, barbell, availablePlates } = props.data;\r\n  return (\r\n    <>\r\n      <Row className=\"d-flex justify-content-between\">\r\n        <h1>Unit</h1>\r\n        <h1>{unit}</h1>\r\n      </Row>\r\n      <Row className=\"d-flex justify-content-between\">\r\n        <h1>Barbell</h1>\r\n        <h1>{barbell[unit]}</h1>\r\n      </Row>\r\n      <Row className=\"d-flex justify-content-center\">\r\n        <h1>Available plates</h1>\r\n      </Row>\r\n      <Row>\r\n        {availablePlates[unit].map((plate, index) => {\r\n          const { value, quantity } = plate;\r\n          return (\r\n            <Col key={index} xs={4}>\r\n              <InvPlateGroup\r\n                onClick={props.onClick}\r\n                value={value}\r\n                quantity={quantity}\r\n                bgColor={calcBgColor(index)}\r\n              />\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Inventory;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n  return <h1>Not Found</h1>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\n// import { CSSTransitionGroup } from 'react-transition-group';\r\nimport '../css/loadDiagram.css';\r\n\r\nconst MAX_HEIGHT = 315;\r\nconst MIN_HEIGHT = 35;\r\nconst limit = value => {\r\n  if (value >= MAX_HEIGHT) return MAX_HEIGHT;\r\n  if (value <= MIN_HEIGHT) return MIN_HEIGHT;\r\n  return value;\r\n};\r\n\r\nconst LoadDiagram = props => {\r\n  const plates = props.calculatedPlates.map((plateWeight, index) => (\r\n    <div key={index} className=\"plate-container\">\r\n      <div\r\n        className=\"plate-container__plate center-vertically\"\r\n        style={{ height: `${limit(plateWeight * 8)}px` }}\r\n      ></div>\r\n      <div className=\"plate-container__plate--text center-vertically\">\r\n        {plateWeight}\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"load\">\r\n      <div className=\"load__barbell--shaft\"></div>\r\n      <div className=\"load__barbell--sleeve-threshold\"></div>\r\n\r\n      <div className=\"load__plate-group \">\r\n        <div style={{ opacity: '0px' }} className=\"plate-container\"></div>\r\n        {/* <CSSTransitionGroup\r\n          transitionName=\"example\"\r\n          transitionEnterTimeout={500}\r\n          transitionLeaveTimeout={300}> */}\r\n          {plates}\r\n        {/* </CSSTransitionGroup> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadDiagram;\r\n","import React from 'react';\r\nimport { Form, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport '../css/loadForm.css';\r\n\r\nconst loadForm = props => {\r\n  return (\r\n    <Form onSubmit={e => props.onSubmit(e)}>\r\n      <InputGroup>\r\n        <FormControl\r\n          className=\"weight-input__form mb-3\"\r\n          type=\"number\"\r\n          name=\"load\"\r\n          placeholder=\"Enter Weight\"\r\n          aria-label=\"weight\"\r\n        />\r\n        <InputGroup.Append>\r\n          <InputGroup.Text className=\"weight-input__text\">\r\n            {props.unit}\r\n          </InputGroup.Text>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n      <Button className=\"mx-auto d-block\" variant=\"dark\" type=\"submit\">\r\n        Submit\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default loadForm;\r\n","import React from 'react';\r\nimport LoadDiagram from './loadDiagram';\r\nimport LoadForm from './loadForm';\r\n\r\nconst PlateCalculator = props => {\r\n  return (\r\n    <>\r\n      <LoadForm unit={props.unit} onSubmit={props.onSubmit} />\r\n      <LoadDiagram calculatedPlates={props.calculatedPlates} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlateCalculator;\r\n","import React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Container } from 'react-bootstrap';\nimport NavBarBottom from './components/navBarBottom';\nimport Inventory from './components/inventory';\nimport NotFound from './components/common/notFound';\nimport PlateCalculator from './components/plateCalculator';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './css/App.css';\n\nconst toKg = lbs => Math.round(lbs / 2.20462);\nconst MAX_PLATES = 8;\n\nclass App extends Component {\n  state = {\n    inventory: {\n      unit: 'lbs',\n      barbell: {\n        lbs: 45,\n        kg: toKg(45)\n      },\n      availablePlates: {\n        lbs: [\n          { value: 100, quantity: 0 },\n          { value: 65, quantity: 0 },\n          { value: 55, quantity: 0 },\n          { value: 50, quantity: 0 },\n          { value: 45, quantity: 8 },\n          { value: 35, quantity: 0 },\n          { value: 25, quantity: 8 },\n          { value: 20, quantity: 0 },\n          { value: 15, quantity: 0 },\n          { value: 12.5, quantity: 0 },\n          { value: 10, quantity: 8 },\n          { value: 7.5, quantity: 0 },\n          { value: 5, quantity: 8 },\n          { value: 2.5, quantity: 8 },\n          { value: 1.25, quantity: 0 },\n          { value: 1, quantity: 0 },\n          { value: 0.75, quantity: 0 },\n          { value: 0.5, quantity: 0 },\n          { value: 0.25, quantity: 0 }\n        ],\n        kg: [\n          { value: 50, quantity: 0 },\n          { value: 45, quantity: 0 },\n          { value: 35, quantity: 0 },\n          { value: 30, quantity: 0 },\n          { value: 25, quantity: 0 },\n          { value: 20, quantity: 0 },\n          { value: 15, quantity: 0 },\n          { value: 12.5, quantity: 0 },\n          { value: 10, quantity: 0 },\n          { value: 7.5, quantity: 0 },\n          { value: 5, quantity: 0 },\n          { value: 3, quantity: 0 },\n          { value: 2.5, quantity: 0 },\n          { value: 2, quantity: 0 },\n          { value: 1.5, quantity: 0 },\n          { value: 1.25, quantity: 0 },\n          { value: 1, quantity: 0 },\n          { value: 0.75, quantity: 0 },\n          { value: 0.5, quantity: 0 },\n          { value: 0.25, quantity: 0 }\n        ]\n      }\n    },\n    calculatedPlates: []\n  };\n\n  render() {\n    return (\n      <>\n        <Container style={{ paddingBottom: '70px' }}>\n          <ToastContainer\n            limit={1}\n            autoClose={2000}\n            hideProgressBar\n            pauseOnFocusLoss={false}\n            draggable={false}\n            pauseOnHover={false}\n          />\n          <Switch>\n            <Route\n              path=\"/rackmath\"\n              render={() => (\n                <PlateCalculator\n                  unit={this.state.inventory.unit}\n                  calculatedPlates={this.state.calculatedPlates}\n                  onSubmit={this.handleLoadSubmit}\n                />\n              )}\n            />\n            <Route\n              path=\"/inventory\"\n              render={() => (\n                <Inventory\n                  data={this.state.inventory}\n                  onClick={this.handlePlateGroupClick}\n                />\n              )}\n            />\n            <Route path=\"/not-found\" component={NotFound} />\n            <Redirect from=\"/\" exact to=\"/rackmath\" />\n            <Redirect to=\"/not-found\" />\n          </Switch>\n        </Container>\n        <NavBarBottom />\n      </>\n    );\n  }\n\n  handlePlateGroupClick = value => {\n    const { unit } = this.state.inventory;\n    const original = { ...this.state.inventory.availablePlates };\n    const index = original[unit].findIndex(element => element.value === value);\n    original[unit][index].quantity = (original[unit][index].quantity + 2) % 10;\n\n    this.setState({ availablePlates: original });\n  };\n\n  handleLoadSubmit = e => {\n    e.preventDefault();\n    const { value: load } = e.currentTarget.load;\n    console.log(load);\n    const { unit, availablePlates } = this.state.inventory;\n    let { barbell } = this.state.inventory;\n    barbell = barbell[unit];\n    const plates = availablePlates[unit].filter(val => val.quantity > 0);\n\n    const platesArray = this.arrayifyInventoryPlates(plates);\n    const { msg, valid } = this.validateLoad(load, barbell, platesArray);\n\n    if (!valid) toast.error(msg);\n    else {\n      const { loadSuccess, tooExact, msg, array } = this.calculatePlates(\n        load,\n        barbell,\n        platesArray\n      );\n      if (!loadSuccess) toast.error(msg);\n      else {\n        if (tooExact) toast.error(msg);\n        this.setState({ calculatedPlates: array });\n      }\n    }\n  };\n\n  arrayifyInventoryPlates = plateFrequencies => {\n    const array = [];\n    for (let plate of plateFrequencies) {\n      for (let j = plate.quantity / 2; j > 0; --j) {\n        array.push(plate.value);\n      }\n    }\n    return array;\n  };\n\n  validateLoad = (load, barbell, platesOnOneEnd) => {\n    if (load < barbell)\n      return { msg: \"That's not even the bar!\", valid: false };\n\n    const totalWeightAvailable =\n      barbell + platesOnOneEnd.reduce((acc, cur) => acc + cur) * 2;\n\n    console.log('validateLoad', platesOnOneEnd);\n    console.log('validateLoad', totalWeightAvailable);\n\n    if (load > totalWeightAvailable)\n      return {\n        msg: \"Your inventory doesn't work with that weight\",\n        valid: false\n      };\n\n    return { msg: 'Load is valid', valid: true };\n  };\n\n  /**\n   * Returns an array containing the plates (weights) that must loaded on one\n   * side of a barbell in order to meet a target load.\n   * @param {Number} targetLoad Weight to load onto barbell\n   * @param {Number} barbell Weight of the barbell\n   * @param {Array} platesArray array of available plate weights.\n   */\n  calculatePlates = (targetLoad, barbell, platesArray) => {\n    let workingLoad = targetLoad - barbell;\n    if (workingLoad === 0) {\n      // Target load equals barbell weight.\n      return { loadSuccess: true, msg: 'Just the bar', array: [] };\n    }\n    /* Only working with loading one side of the barbell. Presumably, each side\n       will be loaded identically. */\n    workingLoad /= 2;\n    let calculatedPlates = [];\n    for (let plate of platesArray) {\n      if (workingLoad >= plate) {\n        calculatedPlates.push(plate);\n        if (calculatedPlates.length > MAX_PLATES)\n          return { msg: 'Not enough room on the bar!' };\n        workingLoad -= plate;\n      }\n    }\n    if (workingLoad !== 0) {\n      const sum =\n        barbell + 2 * calculatedPlates.reduce((prev, cur) => prev + cur, 0);\n\n      return {\n        loadSuccess: true,\n        tooExact: true,\n        msg: `Load is too exact—${\n          calculatedPlates.length === 0\n            ? 'Using just the bar'\n            : `Loaded ${sum} instead`\n        }`,\n        array: calculatedPlates\n      };\n    }\n    return { loadSuccess: true, array: calculatedPlates };\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}