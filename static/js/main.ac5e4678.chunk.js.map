{"version":3,"sources":["components/icons/barbell.jsx","components/icons/plate.jsx","components/icons/info.jsx","components/navBarBottom.jsx","components/invPlateGroup.jsx","components/inventory.jsx","components/common/notFound.jsx","components/loadDiagram.jsx","utils/limitPlateHeight.js","components/loadForm.jsx","components/loadPlateCalc.jsx","components/about.jsx","utils/inventory.js","App.js","utils/calcBgColor.js","serviceWorker.js","index.js"],"names":["Barbell","className","Icon","NavBarBottom","baseUrl","activeClassName","to","InvPlateGroup","value","quantity","bgColor","onClick","style","opacity","Inventory","props","data","unit","barbell","availablePlates","onUnitClick","onPlateGroupClick","Row","variant","minWidth","map","plate","index","color","Col","key","xs","NotFound","LoadDiagram","calculatedPlates","left","height","min_px","max_px","loadForm","Form","onSubmit","e","InputGroup","FormControl","type","name","placeholder","aria-label","onFocus","currentTarget","Append","Text","Button","LoadPlateCalc","About","textAlign","href","modQuantity","plateObjs","modifier","reduce","prev","cur","Math","floor","expandFromQuantity","array","j","push","App","state","inventory","lbs","kg","handleUnitClick","setState","handlePlateGroupClick","original","findIndex","element","handleLoadSubmit","preventDefault","firstElementChild","blur","load","loadInput","halfQuantity","validateLoad","valid","errMsg","calculatePlates","success","warn","msg","severity","calcdPlateObjs","toast","error","prv","targetLoad","workingLoad","length","forEach","input","this","Container","paddingBottom","limit","autoClose","hideProgressBar","pauseOnFocusLoss","draggable","pauseOnHover","path","render","component","from","exact","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ac5e4678.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../css/icons/barbell.css'\r\n\r\nconst Barbell = () => {\r\n  return (\r\n    <div className=\"barbell\">\r\n      <div className=\"barbell__shaft\"></div>\r\n      <div className=\"barbell__weights\">\r\n        <div className=\"barbell__weights--1\">\r\n          <div className=\"weights__small\"></div>\r\n          <div className=\"weights__med\"></div>\r\n          <div className=\"weights__big\"></div>\r\n        </div>\r\n        <div className=\"barbell__weights--2\">\r\n          <div className=\"weights__small\"></div>\r\n          <div className=\"weights__med\"></div>\r\n          <div className=\"weights__big\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Barbell;\r\n","import React from 'react';\r\nimport '../../css/icons/plate.css';\r\n\r\nconst Barbell = () => {\r\n  return (\r\n    <div className=\"plate\">\r\n      <div className=\"plate__outline\"></div>\r\n      <div className=\"plate__circle\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Barbell;\r\n","import React from 'react';\r\nimport '../../css/icons/info.css';\r\nconst Icon = () => (\r\n  <div className=\"info-icon\">\r\n    <div>i</div>\r\n  </div>\r\n);\r\nexport default Icon;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../css/navBarBottom.css';\r\nimport Barbell from './icons/barbell';\r\nimport Plate from './icons/plate';\r\nimport Info from './icons/info';\r\n\r\nconst NavBarBottom = () => {\r\n  const baseUrl = '/barbell-loader'\r\n  return (\r\n    <nav className=\"bg-red fixed-bottom navbar navbar-dark\">\r\n      <div className=\"navbar-nav navbar-expand\">\r\n        <NavLink\r\n          className=\"nav-item\"\r\n          activeClassName=\"active-class\"\r\n          to={`${baseUrl}/home`}\r\n        >\r\n          <Barbell />\r\n        </NavLink>\r\n        <NavLink\r\n          className=\"nav-item\"\r\n          activeClassName=\"active-class\"\r\n          to={`${baseUrl}/inventory`}\r\n        >\r\n          <Plate />\r\n        </NavLink>\r\n        <NavLink\r\n          className=\"nav-item\"\r\n          activeClassName=\"active-class\"\r\n          to={`${baseUrl}/about`}\r\n        >\r\n          <Info />\r\n        </NavLink>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBarBottom;\r\n","import React from 'react';\r\n\r\nconst InvPlateGroup = ({ value, quantity, bgColor, onClick }) => {\r\n  return (\r\n    <div className=\"plate-group text-center\">\r\n      <button\r\n        onClick={() => onClick(value)}\r\n        className={'plate-group__plate' + (quantity ? ' bg-' + bgColor : '')}\r\n      >\r\n        <span className=\"center-vertically\">{value}</span>\r\n      </button>\r\n      <div\r\n        className=\"plate-group__quantity\"\r\n        style={{ opacity: quantity ? '100%' : '0' }}\r\n      >\r\n        <span className=\"center-vertically\">{quantity}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvPlateGroup;\r\n","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport InvPlateGroup from './invPlateGroup';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../css/inventory.css';\r\n\r\nconst Inventory = props => {\r\n  const { unit, barbell, availablePlates } = props.data;\r\n  const { onUnitClick, onPlateGroupClick } = props;\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <h1>Unit</h1>\r\n          <button className=\"unit-btn\" variant=\"danger\" onClick={() => onUnitClick()}>\r\n            {unit}\r\n          </button>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <h1>Barbell</h1>\r\n          <h1>{barbell[unit]}</h1>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-center\">\r\n          <h1>Available plates</h1>\r\n        </Row>\r\n      </div>\r\n      <Row style={{minWidth: '300px'}}>\r\n        {availablePlates[unit].map((plate, index) => {\r\n          const { value, color, quantity } = plate;\r\n          return (\r\n            <Col key={index} xs={4}>\r\n              <InvPlateGroup\r\n                onClick={onPlateGroupClick}\r\n                value={value}\r\n                quantity={quantity}\r\n                bgColor={color}\r\n              />\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Inventory;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n  return <h1>Not Found</h1>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport { limitPlateHeight } from '../utils/limitPlateHeight';\r\nimport '../css/loadDiagram.css';\r\n\r\nconst LoadDiagram = props => {\r\n  return (\r\n    <div className=\"load\">\r\n      <div className=\"load__barbell--shaft\">\r\n        <div>{props.barbell}</div>\r\n      </div>\r\n      <div className=\"load__barbell--sleeve-threshold\"></div>\r\n\r\n      <div className=\"load__plate-group \">\r\n        <div style={{ opacity: '0px' }} className=\"plate-container\"></div>\r\n        {props.calculatedPlates.map((plate, index) => (\r\n          <div\r\n            key={index}\r\n            style={{ left: `${index * 32 + 32}px` }}\r\n            className=\"plate-container\"\r\n          >\r\n            <div\r\n              className={`plate-container__plate center-vertically bg-${plate.color}`}\r\n              style={{\r\n                height: `${limitPlateHeight(plate.value * 8, 35, 315)}px`\r\n              }}\r\n            ></div>\r\n            <div className=\"plate-container__plate--text center-vertically\">\r\n              {plate.value}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadDiagram;\r\n","export const limitPlateHeight = (height, min_px, max_px) => {\r\n  if (height >= max_px) return max_px;\r\n  if (height <= min_px) return min_px;\r\n  return height;\r\n};","import React from 'react';\r\nimport { Form, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport '../css/loadForm.css';\r\n\r\nconst loadForm = props => {\r\n  return (\r\n    <Form onSubmit={e => props.onSubmit(e)}>\r\n      <InputGroup>\r\n        <FormControl\r\n          className=\"weight-input__form mb-3\"\r\n          type=\"number\"\r\n          name=\"loadInput\"\r\n          placeholder=\"Enter Weight\"\r\n          aria-label=\"weight\"\r\n          onFocus={e => { e.currentTarget.value = ''; }}\r\n        />\r\n        <InputGroup.Append>\r\n          <InputGroup.Text className=\"weight-input__text\">\r\n            {props.unit}\r\n          </InputGroup.Text>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n      <Button className=\"mx-auto d-block\" variant=\"dark\" type=\"submit\">\r\n        Submit\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default loadForm;\r\n","import React from 'react';\r\nimport LoadDiagram from './loadDiagram';\r\nimport LoadForm from './loadForm';\r\n\r\nconst LoadPlateCalc = props => {\r\n  return (\r\n    <>\r\n      <LoadForm unit={props.unit} onSubmit={props.onSubmit} />\r\n      <LoadDiagram\r\n        barbell={props.barbell}\r\n        calculatedPlates={props.calculatedPlates}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoadPlateCalc;\r\n","import React from 'react';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div\r\n      className=\"center-vertically\"\r\n      style={{\r\n        textAlign: 'justify'\r\n      }}\r\n    >\r\n      Barbell Loader was inspired by{' '}\r\n      <a href=\"https://www.happyliftingco.com/pages/rackmath\">Rack Math</a> and\r\n      built from scratch by Victor Espaillat with the help of React.js and\r\n      Bootstrap.\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","const modQuantity = (plateObjs, modifier) => {\r\n  return plateObjs.reduce((prev, cur) => {\r\n    // Filter out plates with 0 quantity.\r\n    if (cur.quantity > 0) {\r\n      return [\r\n        ...prev,\r\n        {\r\n          value: cur.value,\r\n          color: cur.color,\r\n          // Half quantity because we want to work with one side of barbell.\r\n          quantity: Math.floor(cur.quantity * modifier)\r\n        }\r\n      ];\r\n    }\r\n    return prev;\r\n  }, []);\r\n};\r\n\r\nconst expandFromQuantity = plateObjs => {\r\n  const array = [];\r\n  for (let plate of plateObjs) {\r\n    let j = Math.floor(plate.quantity);\r\n    while (j > 0) {\r\n      array.push({ value: plate.value, color: plate.color });\r\n      j--;\r\n    }\r\n  }\r\n  return array;\r\n};\r\n\r\nexport { modQuantity, expandFromQuantity };\r\n","import React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Container } from 'react-bootstrap';\nimport NavBarBottom from './components/navBarBottom';\nimport Inventory from './components/inventory';\nimport NotFound from './components/common/notFound';\nimport LoadPlateCalc from './components/loadPlateCalc';\nimport About from './components/about';\nimport { modQuantity, expandFromQuantity } from './utils/inventory';\nimport { calcBgColor } from './utils/calcBgColor';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './css/App.css';\nimport './css/utils.css';\nimport './css/toastify.css';\n\nconst MAX_PLATES = 8;\n\nclass App extends Component {\n  state = {\n    inventory: {\n      unit: 'lbs',\n      barbell: {\n        lbs: 45,\n        kg: 20\n      },\n      availablePlates: {\n        lbs: [\n          { value: 100, quantity: 0 },\n          { value: 65, quantity: 0 },\n          { value: 55, quantity: 0 },\n          { value: 50, quantity: 0 },\n          { value: 45, quantity: 8 },\n          { value: 35, quantity: 0 },\n          { value: 30, quantity: 0 },\n          { value: 25, quantity: 8 },\n          { value: 20, quantity: 0 },\n          { value: 15, quantity: 0 },\n          { value: 12.5, quantity: 0 },\n          { value: 10, quantity: 8 },\n          { value: 7.5, quantity: 0 },\n          { value: 5, quantity: 8 },\n          { value: 2.5, quantity: 8 },\n          { value: 1.25, quantity: 0 },\n          { value: 1, quantity: 0 },\n          { value: 0.75, quantity: 0 },\n          { value: 0.5, quantity: 0 },\n          { value: 0.25, quantity: 0 }\n        ],\n        kg: [\n          { value: 50, quantity: 0 },\n          { value: 45, quantity: 0 },\n          { value: 35, quantity: 0 },\n          { value: 30, quantity: 0 },\n          { value: 25, quantity: 0 },\n          { value: 20, quantity: 8 },\n          { value: 15, quantity: 0 },\n          { value: 12.5, quantity: 0 },\n          { value: 10, quantity: 8 },\n          { value: 7.5, quantity: 0 },\n          { value: 5, quantity: 8 },\n          { value: 3, quantity: 0 },\n          { value: 2.5, quantity: 8 },\n          { value: 2, quantity: 0 },\n          { value: 1.5, quantity: 0 },\n          { value: 1.25, quantity: 8 },\n          { value: 1, quantity: 0 },\n          { value: 0.75, quantity: 0 },\n          { value: 0.5, quantity: 0 },\n          { value: 0.25, quantity: 0 }\n        ]\n      }\n    },\n    calculatedPlates: []\n  };\n\n  componentDidMount() {\n    let availablePlates = {};\n\n    ['lbs', 'kg'].forEach(unit => {\n      availablePlates[unit] = this.state.inventory.availablePlates[\n        unit\n      ].map((plate, index) => ({ ...plate, color: calcBgColor(index) }));\n    });\n\n    const { inventory } = this.state;\n    inventory.availablePlates = availablePlates;\n    this.setState({ inventory });\n  }\n\n  render() {\n    const { unit, barbell } = this.state.inventory;\n    const baseUrl = '/barbell-loader';\n    return (\n      <>\n        <Container style={{ paddingBottom: '70px' }}>\n          <ToastContainer\n            limit={1}\n            autoClose={2000}\n            hideProgressBar\n            pauseOnFocusLoss={false}\n            draggable={false}\n            pauseOnHover={false}\n          />\n          <Switch>\n            <Route\n              path={`${baseUrl}/home`}\n              render={() => (\n                <LoadPlateCalc\n                  unit={unit}\n                  barbell={barbell[unit]}\n                  calculatedPlates={this.state.calculatedPlates}\n                  onSubmit={this.handleLoadSubmit}\n                />\n              )}\n            />\n            <Route\n              path={`${baseUrl}/inventory`}\n              render={() => (\n                <Inventory\n                  data={this.state.inventory}\n                  onUnitClick={this.handleUnitClick}\n                  onPlateGroupClick={this.handlePlateGroupClick}\n                />\n              )}\n            />\n            <Route path={`${baseUrl}/about`} component={About}></Route>\n            <Route path={`${baseUrl}/not-found`} component={NotFound} />\n            <Redirect from=\"/\" exact to={baseUrl} />\n            <Redirect from={baseUrl} exact to={`${baseUrl}/home`} />\n            <Redirect to={`${baseUrl}/not-found`} />\n          </Switch>\n        </Container>\n        <NavBarBottom />\n      </>\n    );\n  }\n\n  handleUnitClick = () => {\n    let inventory = { ...this.state.inventory };\n    if (inventory.unit === 'lbs') inventory.unit = 'kg';\n    else inventory.unit = 'lbs';\n    this.setState({ inventory });\n  };\n\n  handlePlateGroupClick = value => {\n    const { unit } = this.state.inventory;\n    const original = { ...this.state.inventory.availablePlates };\n    const index = original[unit].findIndex(element => element.value === value);\n    original[unit][index].quantity = (original[unit][index].quantity + 2) % 10;\n\n    this.setState({ availablePlates: original });\n  };\n\n  handleLoadSubmit = e => {\n    e.preventDefault();\n    e.currentTarget.firstElementChild.firstElementChild.blur();\n\n    const { value: load } = e.currentTarget.loadInput;\n    const { unit, availablePlates } = this.state.inventory;\n    const barbell = this.state.inventory.barbell[unit];\n    const halfQuantity = modQuantity(availablePlates[unit], 0.5);\n    const plateObjs = expandFromQuantity(halfQuantity);\n    const { valid, errMsg } = this.validateLoad(load, barbell, plateObjs);\n\n    if (!valid) toast.error(errMsg);\n    else {\n      const {\n        success,\n        warn: { msg, severity },\n        calcdPlateObjs\n      } = this.calculatePlates(unit, load, barbell, plateObjs);\n\n      if (severity === 'low') toast.success(msg);\n      else if (severity === 'med') toast.warn(msg);\n      else if (severity === 'high') toast.error(msg);\n\n      if (success) this.setState({ calculatedPlates: calcdPlateObjs });\n    }\n  };\n\n  validateLoad = (load, barbell, plateObjs) => {\n    if (load < barbell)\n      return {\n        errMsg: \"That's not even the bar!\",\n        valid: false\n      };\n\n    const totalWeightAvail =\n      barbell + 2 * plateObjs.reduce((prv, cur) => prv + cur.value, 0);\n\n    if (load > totalWeightAvail)\n      return {\n        errMsg: \"Your inventory doesn't work with that weight\",\n        valid: false\n      };\n\n    return { valid: true };\n  };\n\n  /**\n   * Returns an array containing the plates (weights) that must loaded on one\n   * side of a barbell in order to meet a target load.\n   * @param {Number} targetLoad Weight to load onto barbell\n   * @param {Number} barbell Weight of the barbell\n   * @param {Array} plateObjs array of weight value and color pairs.\n   */\n  calculatePlates = (unit, targetLoad, barbell, plateObjs) => {\n    let workingLoad = targetLoad - barbell;\n    if (workingLoad === 0)\n      return {\n        success: true,\n        warn: { msg: 'Just the bar', severity: 'low' },\n        calcdPlateObjs: []\n      };\n\n    /* Showing how to load one side of the barbell. Presumably, both sides are\n       identical. */\n    workingLoad /= 2;\n    let calcdPlateObjs = [];\n\n    for (let plate of plateObjs) {\n      if (workingLoad >= plate.value) {\n        calcdPlateObjs.push(plate);\n        if (calcdPlateObjs.length > MAX_PLATES)\n          return {\n            success: false,\n            warn: { msg: 'Not enough room on the bar!', severity: 'high' }\n          };\n        workingLoad -= plate.value;\n      }\n    }\n\n    if (workingLoad !== 0) {\n      return {\n        success: true,\n        warn: {\n          msg: `${workingLoad * 2} ${unit} has been rounded off.`,\n          severity: 'med'\n        },\n        calcdPlateObjs\n      };\n    }\n    return {\n      success: true,\n      warn: { msg: `${targetLoad} ${unit} loaded!`, severity: 'low' },\n      calcdPlateObjs\n    };\n  };\n}\n\nexport default App;\n","export const calcBgColor = input => {\r\n  if (input % 6 === 0) return 'black';\r\n  if (input % 5 === 0) return 'yellow';\r\n  if (input % 4 === 0) return 'red';\r\n  if (input % 3 === 0) return 'purple';\r\n  if (input % 2 === 0) return 'green';\r\n  return 'cyan';\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}