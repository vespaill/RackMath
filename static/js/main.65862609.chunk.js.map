{"version":3,"sources":["icons/fire.png","components/icons/barbell.jsx","components/icons/plate.jsx","components/icons/info.jsx","components/icons/fire.jsx","components/navBar.jsx","components/invPlateGroup.jsx","components/common/header.jsx","components/inventory.jsx","components/common/notFound.jsx","components/loaderForm.jsx","utils/limitPlateHeight.js","components/loadDiagram.jsx","components/loadValue.jsx","components/loader.jsx","components/icons/cog.jsx","components/setsCalcForm.jsx","components/setContainer.jsx","components/common/popup.jsx","components/setsCalculator.jsx","components/about.jsx","utils/plates.js","App.js","utils/rampUps.js","utils/getHexColor.js","serviceWorker.js","index.js"],"names":["module","exports","Barbell","className","Icon","Fire","src","fireIcon","alt","NavBar","navLinks","url","pathname","from","component","commonProps","activeClassName","replace","map","index","key","to","InvPlateGroup","props","value","quantity","backgroundColor","color","onClick","style","Header","children","my","mx","textJustify","React","Children","count","myC","mxC","Row","child","Fragment","Inventory","unit","barbell","availPlates","onUnitClick","onPlateGroupClick","onClear","e","minWidth","plate","plateGroupProps","Col","xs","NotFound","LoaderForm","Form","onSubmit","InputGroup","FormControl","type","inputMode","pattern","name","placeholder","aria-label","min","step","onFocus","currentTarget","select","Append","Text","Button","variant","btnText","limitPlateHeight","height","min_px","max_px","LoadDiagram","barbellWeight","calcdPlates","opacity","shortid","generate","left","animationDelay","LoadValue","prevCalcdLoad","calcdLoad","Loader","resetPrevLoad","formProps","diagramProps","loadValProps","useLocation","useEffect","Cog","width","viewBox","fill","xmlns","fillRule","d","SetsCalcForm","onSettings","workWeight","workNumReps","formControlProps","required","maxWeight","max","defaultValue","SetContainer","percentage","weight","numReps","isWorkingSet","workSetClass","Math","round","Popup","show","onClose","header","SetsCalculator","warmUpSets","percentages","contProps","onLoad","length","workWeightContProps","useState","showPopup","setShowPopup","togglePopup","href","target","set","additionalProps","on","togglePercentage","About","textAlign","findAllValidCombs","targetLoad","barLoad","plateObjs","cpyPlateObjs","combinations","subsets","calcSubsets","subsetCpy","plateGroup","isValidComb","success","roundOff","push","shift","coyPlateObjs","lightestPlate","reduce","prev","cur","i","nextLoad","dif","abs","findBestComb","console","log","minRoundOff","combsMinRoundOff","comb","filter","minNumPlates","combsMinNumPlates","combsHeaviestPlates","prevHeaviestPlate","curHeaviestPlate","acc","bitSet","subset","j","App","state","lbs","kg","prevWarmUpSets","handleUnitClick","setState","classList","add","remove","localStorage","handlePlateGroupClick","findIndex","element","quant","handleLoadSubmit","preventDefault","firstElementChild","blur","handleLoad","loadInput","load","modifier","input","avlPltsOneSide","maxLoad","warn","amount","up","bestCombination","roundOffAmount","calculatePlates","toast","error","handleWorkSetSubmit","querySelectorAll","forEach","elem","numRepsInput","updateWarmUpSets","lightestPlateAvail","remainder","dividend","roundToNearestStepHelper","roundToNearestStep","workingNumSets","calcRampUpReps","handlePlateGroupsClear","handleTogglePercentage","defaultAvailPlates","unit_weight_hexcolor_map","bgColors_w_black_letters","lkp_weight","Number","includes","getHexColor","get","this","loaderProps","invProps","setsCalcProps","toastProps","autoClose","hideProgressBar","pauseOnFocusLoss","draggable","pauseOnHover","newestOnTop","paddingBottom","path","render","exact","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.65862609.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fire.fe489d1d.png\";","import React from 'react';\nimport '../../css/icons/barbell.css';\n\nconst Barbell = () => {\n  return (\n    <div className=\"barbell-icon\">\n      <div className=\"barbell\">\n        <div className=\"barbell__shaft\"></div>\n        <div className=\"plate-group--1\">\n          <div className=\"plate-group__plate--small\"></div>\n          <div className=\"plate-group__plate--med\"></div>\n          <div className=\"plate-group__plate--large\"></div>\n        </div>\n        <div className=\"plate-group--2\">\n          <div className=\"plate-group__plate--small\"></div>\n          <div className=\"plate-group__plate--med\"></div>\n          <div className=\"plate-group__plate--large\"></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Barbell;\n","import React from 'react';\nimport '../../css/icons/plate.css';\n\nconst Barbell = () => {\n  return (\n    <div className=\"plate-icon\">\n      <div className=\"plate__outline\"></div>\n      <div className=\"plate__circle\"></div>\n    </div>\n  );\n};\n\nexport default Barbell;\n","import React from 'react';\nimport '../../css/icons/info.css';\n\nconst Icon = () => (\n  <div className=\"info-icon\">\n    <div>i</div>\n  </div>\n);\n\nexport default Icon;\n","import React from 'react';\nimport fireIcon from '../../icons/fire.png'\nimport '../../css/icons/fire.css'\n\nconst Fire = () => {\n  return <img className=\"fire-icon\" src={fireIcon} alt=\"fire\" />;\n};\n\nexport default Fire;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport '../css/navBar.css';\nimport Barbell from './icons/barbell';\nimport Plate from './icons/plate';\nimport Info from './icons/info';\nimport Fire from './icons/fire';\n\nconst NavBar = () => {\n  const navLinks = [\n    { url: { pathname: '/home', from: 'navBar' }, component: <Barbell /> },\n    { url: '/warmup', component: <Fire /> },\n    { url: '/inventory', component: <Plate /> },\n    { url: '/about', component: <Info /> }\n  ];\n  const commonProps = { className: 'nav-item', activeClassName: 'active-class', replace: true };\n  return (\n    <nav className=\"bg-red navbar fixed-bottom d-flex justify-content-between\">\n      {navLinks.map(({ url, component }, index) => (\n        <NavLink key={index} {...commonProps} to={url}>\n          {component}\n        </NavLink>\n      ))}\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\n\nconst InvPlateGroup = props => {\n   const { value, quantity, backgroundColor, color, onClick } = props;\n   return (\n      <div className=\"plate-group text-center\">\n         <button onClick={() => onClick(value)}\n                 className={'plate-group__plate'}\n                 style={{ backgroundColor, color }}\n         >\n            <span className=\"center-vertically\">{value}</span>\n         </button>\n         {quantity > 0 && (\n            <div className=\"plate-group__quantity\">\n               <span className=\"center-vertically unselectable\">{quantity}</span>\n            </div>\n         )}\n      </div>\n   );\n};\n\nexport default InvPlateGroup;\n","import React from 'react';\nimport { Row } from 'react-bootstrap';\n\nconst Header = props => {\n  const { children, my, mx } = props;\n  const textJustify = React.Children.count(children) > 1 ? 'between' : 'center';\n  const myC = 'my-' + (my ? my : '1');\n  const mxC = 'mx-' + (mx ? mx : '3');\n\n  return (\n    <Row className={`${myC} ${mxC} d-flex justify-content-${textJustify}`}>\n      {React.Children.map(children, child => (\n        <React.Fragment>{child}</React.Fragment>\n      ))}\n    </Row>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport InvPlateGroup from './invPlateGroup';\nimport Header from './common/header';\nimport '../css/inventory.css';\n\nconst Inventory = props => {\n  const { unit, barbell, availPlates, onUnitClick, onPlateGroupClick, onClear } = props;\n\n  return (\n    <>\n      <Header>\n        <h1>Unit</h1>\n        <button className=\"btn-unit\" onClick={e => onUnitClick(e)}>\n          {unit}\n        </button>\n      </Header>\n      <Header>\n        <h1>Barbell</h1>\n        <h1>{barbell[unit]}</h1>\n      </Header>\n      <Header>\n        <h1>Available plates</h1>\n      </Header>\n      <Row style={{ minWidth: '300px' }}>\n        {availPlates[unit].map((plate, index) => {\n          const { value, backgroundColor, color, quantity } = plate;\n          const plateGroupProps = { onClick: onPlateGroupClick, value, quantity, backgroundColor, color };\n          return (\n            <Col key={index} xs={4}>\n              <InvPlateGroup {...plateGroupProps} />\n            </Col>\n          );\n        })}\n        <Col xs={4}>\n          <div className=\"btn-clear-container text-center\">\n            <button className=\"btn-clear\" onClick={() => onClear()}>\n              <span className=\"center-vertically\">clear</span>\n            </button>\n          </div>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Inventory;\n","import React from 'react';\n\nconst NotFound = () => {\n  return <h1>Not Found</h1>;\n};\n\nexport default NotFound;\n","import React from 'react';\nimport { Form, InputGroup, FormControl, Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../css/loadForm.css';\n\nconst LoaderForm = props => {\n  return (\n    <Form onSubmit={e => props.onSubmit(e)}>\n      <InputGroup>\n        <FormControl\n          className=\"text-right\"\n          type=\"number\"\n          inputMode=\"numeric\"\n          pattern=\"[0-9]*\"\n          name=\"loadInput\"\n          placeholder={props.placeholder}\n          aria-label=\"weight\"\n          min=\"0\"\n          step=\"0.5\"\n          onFocus={e => { e.currentTarget.select(); }}\n        />\n        <InputGroup.Append>\n          <InputGroup.Text className=\"weight-input__text\">\n            {props.unit}\n          </InputGroup.Text>\n        </InputGroup.Append>\n      </InputGroup>\n      <div>\n        <Button className=\"mx-auto d-block\" variant=\"dark\" type=\"submit\">\n          {props.btnText}\n        </Button>\n      </div>\n    </Form>\n  );\n};\n\nexport default LoaderForm;\n","export const limitPlateHeight = (height, min_px, max_px, unit) => {\n   height *= (unit==='kg'? 2.204 : 1);\n  if (height >= max_px) return max_px;\n  if (height <= min_px) return min_px;\n  return height;\n};","import React from 'react';\nimport { limitPlateHeight } from '../utils/limitPlateHeight';\nimport shortid from 'shortid';\nimport '../css/loadDiagram.css';\n\nconst LoadDiagram = props => {\n  const { unit, barbellWeight, calcdPlates } = props;\n\n  return (\n    <>\n      <div className=\"load\">\n        <div className=\"load__barbell--shaft\">\n          <div>{barbellWeight}</div>\n        </div>\n        <div className=\"load__barbell--sleeve-threshold\" />\n        <div className=\"load__plate-group\">\n          <div style={{ opacity: '0px' }} className=\"plate-container\" />\n          {calcdPlates.map(({ backgroundColor, color, value }, index) => {\n            return (\n            <div\n              key={shortid.generate()}\n              className=\"plate-container animate-slide-in-and-bounce\"\n              style={{ left: `${index * 32 + 32}px`, animationDelay: `${index*0.1}s` }}\n            >\n              <div\n                className={`plate-container__plate center-vertically`}\n                style={{ backgroundColor, height: `${limitPlateHeight(value * 7, 45, 315, unit)}px` }}\n              />\n              <div className=\"plate-container__plate--text center-vertically\">{value}</div>\n            </div>\n          )})}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default LoadDiagram;\n","import React from 'react';\nimport shortid from 'shortid';\nimport '../css/loadValue.css';\n\nconst LoadValue = props => {\n  const { prevCalcdLoad, calcdLoad, unit } = props;\n  return (\n    <div className=\"load-value center-vertically\">\n      {prevCalcdLoad > -1 && (\n        <div key={shortid.generate()} className=\"load-value__prev badge badge-success animate-leave\">\n          {`${prevCalcdLoad} ${unit}`}\n        </div>\n      )}\n      {calcdLoad > -1 && (\n        <div key={shortid.generate()} className=\"load-value__cur badge badge-success animate-enter\">\n          {`${calcdLoad} ${unit}`}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LoadValue;\n","import React, { useEffect } from 'react';\nimport { useLocation, Redirect } from 'react-router-dom';\nimport Header from './common/header';\nimport LoaderForm from './loaderForm';\nimport LoadDiagram from './loadDiagram';\nimport LoadValue from './loadValue';\n\nconst Loader = props => {\n  const { unit, barbellWeight, calcdPlates, calcdLoad, prevCalcdLoad, onSubmit, resetPrevLoad } = props;\n  const formProps = { unit, onSubmit };\n  const diagramProps = { unit, barbellWeight, calcdPlates };\n  const loadValProps = { unit, calcdLoad, prevCalcdLoad };\n  const { from } = useLocation();\n\n  /* useEffect is similar to componentDidMount and componentDidUpdate. If we\n   * came from navBar, set prevLoad to -1 to prevent the prevLoad slide-out\n   * animation from playing out. In this case, we want only the curLoad slide-in\n   * animation to play out. */\n  useEffect(() => {\n    if (from === 'navBar') resetPrevLoad();\n  }, [from, resetPrevLoad]);\n\n  /* If we came from navBar, redirect to this component again. Doing so will\n   * give the resetPrevLoad() callback plenty of time to run, and that will\n   * prevent us the displeasure of seeing the prevLoad element pop out of view.\n   * */\n  return from === 'navBar' ? (\n    <Redirect to=\"/home\" />\n  ) : (\n    <>\n      <Header>\n        <h1>Barbell Loader</h1>\n      </Header>\n      <LoaderForm {...formProps} placeholder=\"Enter Weight\" btnText=\"Load\" />\n      <LoadDiagram {...diagramProps} />\n      <LoadValue {...loadValProps} />\n    </>\n  );\n};\n\nexport default Loader;\n","import React from 'react';\n\nconst Cog = () => (\n  <svg\n    width=\"25.25\"\n    height=\"25.25\"\n    viewBox=\"0 0 16 16\"\n    className=\"bi bi-gear-fill\"\n    fill=\"currentColor\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 0 0-5.86 2.929 2.929 0 0 0 0 5.858z\"\n    />\n  </svg>\n);\nexport default Cog;\n","import React from 'react';\nimport { Form, InputGroup, FormControl, Button } from 'react-bootstrap';\nimport Cog from './icons/cog';\nimport '../css/loadForm.css';\n\nconst SetsCalcForm = props => {\n  const { unit, onSubmit, btnText, onSettings, workWeight, workNumReps } = props;\n  const formControlProps = {\n    required: true,\n    type: 'number',\n    inputMode: 'numeric',\n    pattern: '[0-9]*',\n    min: '0',\n    onFocus: e => {\n      e.currentTarget.select();\n    }\n  };\n  const maxWeight = unit === 'kg' ? 2840 : 7000;\n\n  return (\n    <Form onSubmit={e => onSubmit(e)}>\n      <InputGroup>\n        <FormControl\n          name=\"loadInput\"\n          placeholder=\"weight\"\n          max={maxWeight}\n          step=\"0.5\"\n          defaultValue={workWeight > 0 ? workWeight : 'weight'}\n          {...formControlProps}\n        />\n        <InputGroup.Append>\n          <InputGroup.Text>{unit} &times; </InputGroup.Text>\n        </InputGroup.Append>\n        <FormControl\n          name=\"numRepsInput\"\n          placeholder=\"reps\"\n          max=\"999\"\n          step=\"1\"\n          defaultValue={workNumReps > 0 ? workNumReps : 'reps'}\n          {...formControlProps}\n        />\n      </InputGroup>\n      <div className=\"button-group\">\n        <Button className=\"calc-btn\" type=\"submit\" variant=\"dark\">\n          {btnText}\n        </Button>\n        <Button className=\"settings-btn\" variant=\"dark\" onClick={() => onSettings()}>\n          <Cog />\n        </Button>\n      </div>\n    </Form>\n  );\n};\n\nexport default SetsCalcForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport '../css/setContainer.css';\n\nconst SetContainer = props => {\n  const { unit, percentage, weight, numReps, isWorkingSet, btnText, animationDelay } = props;\n  const workSetClass = isWorkingSet ? ' working-weight' : '';\n\n  return (\n    <div\n      style={{ animationDelay }}\n      className={'set-container d-flex justify-content-between animate-slide-in' + workSetClass}\n    >\n      <span className=\"percentage\">{Math.round(percentage * 100)}%</span>\n      <span className=\"set\">{`${weight} ${unit} \\u00D7 ${numReps}`}</span>\n      <Link to=\"/home\">\n        <Button variant=\"dark\" onClick={() => props.onClick(weight)}>\n          {btnText}\n        </Button>\n      </Link>\n    </div>\n  );\n};\n\nexport default SetContainer;\n","import React from 'react';\nimport Header from './header';\nimport { Button } from 'react-bootstrap';\nimport '../../css/popup.css';\n\nconst Popup = props => {\n  const { show, onClose, children, header } = props;\n  return (\n    <div className={'popup' + (show ? '' : ' hide')}>\n      <div className=\"popup__content\">\n        <Header mx={3} my={2}>\n          <h1>{header}</h1>\n          <Button className=\"close-btn\" variant=\"danger\" onClick={() => onClose()}>\n            <div>&times;</div>\n          </Button>\n        </Header>\n        <div>{children}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Popup;\n","import React, { useState } from 'react';\nimport SetsCalcForm from './setsCalcForm';\nimport SetContainer from './setContainer';\nimport Header from './common/header';\nimport Popup from './common/popup';\nimport shortid from 'shortid';\nimport '../css/setsCalculator.css';\n\nconst SetsCalculator = props => {\n  const { workWeight, workNumReps, warmUpSets, percentages, unit, onSubmit, onLoad } = props;\n  const contProps = { unit, onClick: onLoad, animationDelay: `${warmUpSets.length*0.05}s` };\n  const workWeightContProps = { percentage: 1, weight: workWeight, numReps: workNumReps, isWorkingSet: true, btnText: 'Start' };\n  const [showPopup, setShowPopup] = useState(false);\n  const togglePopup = () => { setShowPopup(!showPopup); };\n  const formProps = { unit, onSubmit, onSettings: togglePopup, workWeight, workNumReps, btnText: 'Calculate',  };\n\n  return (\n    <>\n      <Header>\n        <a href=\"https://www.t-nation.com/training/most-intelligent-way-to-warm-up\" target=\"#blank\">\n          <h1>Warm Up Sets Calculator</h1>\n        </a>\n      </Header>\n      <SetsCalcForm {...formProps} />\n      {!showPopup && (\n        <div className=\"setList-container\">\n          <div className=\"setList mx-auto\">\n            {warmUpSets.map((set, index) => {\n              const { percentage, weight, numReps } = set;\n              const additionalProps = { percentage, weight, numReps, animationDelay: `${index * 0.05}s` };\n              return <SetContainer key={shortid.generate()} btnText=\"Load\" {...contProps} {...additionalProps} />;\n            })}\n            {workWeight !== -1 && <SetContainer key={shortid.generate()} {...contProps} {...workWeightContProps} />}\n          </div>\n        </div>\n      )}\n      <Popup show={showPopup} header={\"Sets Toggler\"} onClose={togglePopup}>\n        {percentages.map(({ value, on }, index) => (\n          <button\n            key={index}\n            onClick={() => props.togglePercentage(index)}\n            className={`mx-auto d-block mb-3 font-weight-bold btn btn-${on ? 'warning' : 'secondary text-dark'}`}\n            style={{ animationDelay: `${index*0.1}s` }}\n          >{`${Math.round(value * 100)}%`}</button>\n        ))}\n      </Popup>\n    </>\n  );\n};\n\nexport default SetsCalculator;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../css/about.css';\n\nconst About = () => {\n  return (\n    <div className=\"about\" >\n      <h1 style={{textAlign: 'center'}}>Less Thinking, More Lifting</h1>\n      <p><strong>Workout faster.</strong> Quickly figure out which plates to mount onto a barbell in order to hit a target weight.</p>\n      <p>No more trying to do barbell math in your head. Simply <Link to=\"/home\">enter a value</Link> and see what plates you would need.</p>\n      <p><strong>Accommodate inventory.</strong> Find the most optimal plate combination, given the <Link to=\"/inventory\">plates you have available</Link> at the moment.</p>\n      <p><strong>Workout smarter.</strong> Warm up by doing some <Link to=\"/warmup\">Ramp Up</Link> sets before starting a heavy set.</p>\n      <div className=\"example\">\n        <p className=\"m-0\"><strong>Example:</strong></p>\n        <p className=\"m-0\">You trying to load 215 lbs:</p>\n        <blockquote>\"If the barbell weighs 45, add a plate 45 on each end, that makes 135, then add a plate 35, that makes 205, ..., Oh snap, there are no plate 35s ...\"</blockquote>\n        <p className=\"m-0\">You with Barbell Loader:</p>\n        <blockquote className=\"mb-0\">\"Enter 215, immediately see the required plate combination. No 35s? No problem, check that plate group off your inventory and enter 215 again.\"</blockquote>\n      </div>\n      <p><strong>Barbell Loader</strong> was inspired by{' '}<a target=\"#blank\" href=\"https://www.happyliftingco.com/pages/rackmath\">RackMath</a>{' '}and built from scratch by Victor Espaillat with the help of React.js and Bootstrap.</p>\n    </div>\n  );\n};\n\nexport default About;\n","const DEFAULT_INV_PLATES = 8;\nconst INV_MAX_PLATES = 16;\nconst SLEEVE_MAX_PLATES = 8;\n\n/**\n *\n * @param {Number} targetLoad The desired weight to load onto the barbell.\n * @param {Number} barLoad The weight value of the barbell.\n * @param {Object[]} plateObjs Array of plate objects.\n * @param {Number} plateObjs[].value The weight value of the plate.\n * @param {String} plateObjs[].color The color of the plate.\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\n */\nconst calculatePlates = (targetLoad, barLoad, plateObjs) => {\n  const success = true;\n  const dif = Math.abs(targetLoad - barLoad);\n  const lightestPlate = plateObjs.reduce((prev, cur) => (prev.value < cur.value ? prev : cur)).value;\n\n  if (dif === 0) return { success, warn: 'justbar', calcdLoad: barLoad, calcdPlates: [] };\n  else if (dif <= lightestPlate) return { success, warn: 'roundoff', calcdLoad: barLoad, calcdPlates: [], roundOff: { amount: dif, up: false } };\n\n  const combinations = findAllValidCombs(targetLoad, barLoad, plateObjs);\n  if (combinations.length === 0) return { success: false, warn: 'notEnoughRoom' };\n  const bestCombination = findBestComb(combinations);\n  const { calcdLoad, calcdPlates, roundOff: roundOffAmount } = bestCombination;\n\n  let warn, roundOff;\n  if (roundOffAmount) {\n    warn = 'roundoff';\n    roundOff = { amount: roundOffAmount, up: calcdLoad > targetLoad };\n  }\n\n  return { success, calcdLoad, calcdPlates, roundOff, warn };\n};\n\n/**\n * Using the given plate objects, finds all the possible and valid plate\n * combinations that meet the desired target load with reasonable round off.\n * @param {Number} targetLoad The desired weight to load onto the barbell.\n * @param {Number} barLoad The weight value of the barbell.\n * @param {Object[]} plateObjs Array of plate objects.\n * @param {Number} plateObjs[].value The weight value of the plate.\n * @param {String} plateObjs[].color The color of the plate.\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\n */\nconst findAllValidCombs = (targetLoad, barLoad, plateObjs) => {\n  // console.log('available plates:', availPlates);\n  let cpyPlateObjs = plateObjs.map(plate => ({ ...plate }));\n  let combinations = [];\n  let subsets = calcSubsets(cpyPlateObjs); // array of arrays of plateGroups\n  // console.log('all subsets of available plates:', subsets);\n\n  for (let subset of subsets) {\n    let subsetCpy = subset.map(plateGroup => ({ ...plateGroup })); // arrays of plateGroups\n    while (subsetCpy.length > 0) {\n      let { success, calcdLoad, calcdPlates, roundOff } = isValidComb(targetLoad, barLoad, subsetCpy);\n      if (success) combinations.push({ calcdLoad, calcdPlates, roundOff });\n      subsetCpy[0].quantity--;\n      if (subsetCpy[0].quantity <= 0) subsetCpy.shift();\n    }\n  }\n  // console.log('combinations:', combinations);\n  return combinations;\n};\n\n/**\n * Determines whether it is possible to load a target weight onto a barbell,\n * given an array containing a finite number of plate objects, with a reasonable\n * amount of round off allowed.\n * If so, returns the calculated plate objects array.\n * @param {Number} targetLoad The desired weight to load onto the barbell.\n * @param {Number} barLoad The weight value of the barbell.\n * @param {Object[]} plateObjs Array of plate objects.\n * @param {Number} plateObjs[].value The weight value of the plate.\n * @param {String} plateObjs[].color The color of the plate.\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\n */\nconst isValidComb = (targetLoad, barLoad, plateObjs) => {\n  let coyPlateObjs = plateObjs.map(plate => ({ ...plate }));\n  let calcdLoad = barLoad;\n  const calcdPlates = [];\n  const lightestPlate = plateObjs.reduce((prev, cur) => (prev.value < cur.value ? prev : cur)).value;\n\n  for (let plateGroup of coyPlateObjs) {\n    let { value, backgroundColor, color, quantity } = plateGroup;\n    for (let i = 0; i < quantity; ++i) {\n      const nextLoad = value * 2;\n      const dif = Math.abs(targetLoad - (calcdLoad + nextLoad));\n      if (calcdLoad + nextLoad < targetLoad || dif < lightestPlate) {\n        calcdLoad += nextLoad;\n        calcdPlates.push({ value, backgroundColor, color });\n        if (calcdPlates.length > SLEEVE_MAX_PLATES) return { success: false };\n        plateGroup.quantity--;\n      }\n    }\n  }\n  const roundOff = Math.abs(targetLoad - calcdLoad);\n  const heaviestPlate = plateObjs.reduce((prev, cur) => (prev.value > cur.value ? prev : cur)).value;\n  // Only return success if roundOff is reasonable.\n  if (roundOff > heaviestPlate * 2) return { success: false };\n  return { success: true, calcdLoad, calcdPlates, roundOff };\n};\n\n/**\n * Given an array of possible plate combinations, returns the best one. That is,\n * one with the least amount of round off, with the least number of plates\n * possible, and one which favors heavier plates first.\n * @param {Object[]} combinations\n * @param {Number} combinations[].roundOff\n * @param {Number} combinations[].caldLoad The sum of every plate value in calcdPlate[].\n * @param {Object[]} combinations[].calcdPlates an array of plate objects with no quantity prop, but instead allowing duplicates.\n * @param {Number} combinations[].calcdPlates[].value The weight value of the plate.\n * @param {String} combinations[].calcdPlates[].color The color of the plate.\n */\nconst findBestComb = combinations => {\n  console.log('combinations:', combinations);\n  const minRoundOff = combinations.reduce((prev, cur) => (prev.roundOff < cur.roundOff ? prev : cur)).roundOff;\n  const combsMinRoundOff = combinations.map(comb => ({ ...comb })).filter(comb => comb.roundOff === minRoundOff);\n  const minNumPlates = combsMinRoundOff.reduce((prev, cur) => prev.calcdPlates.length < cur.calcdPlates.length ? prev : cur).calcdPlates.length;\n  const combsMinNumPlates = combsMinRoundOff.map(comb => ({ ...comb })).filter(comb => comb.calcdPlates.length === minNumPlates);\n  const combsHeaviestPlates = combsMinNumPlates.reduce((prev, cur) => {\n    const prevHeaviestPlate = prev.calcdPlates.reduce((prev, cur) => (prev.value > cur.value ? prev : cur)).value;\n    const curHeaviestPlate = cur.calcdPlates.reduce((prev, cur) => (prev.value > cur.value ? prev : cur)).value;\n    if (prevHeaviestPlate === curHeaviestPlate) {\n      const prevHeaviestCount = prev.calcdPlates.reduce((acc, cur) => (cur.value === prevHeaviestPlate ? acc + 1 : acc), 0);\n      const curHeaviestPlate = cur.calcdPlates.reduce((acc, cur) => (cur.value === prevHeaviestPlate ? acc + 1 : acc), 0);\n      return prevHeaviestCount > curHeaviestPlate ? prev : cur;\n    }\n    return prevHeaviestPlate > curHeaviestPlate ? prev : cur;\n  });\n  console.log('least round off:', combsMinRoundOff);\n  console.log('least number of plates:', combsMinNumPlates);\n  console.log('favorsHeavierPlates:', combsHeaviestPlates);\n  return combsHeaviestPlates;\n};\n\n/**\n * Returns an array containing all sub-arrays (subsets) of a given array of\n * objects.\n * @param {Object[]} set An array of objects.\n */\nconst calcSubsets = set => {\n  let numSubsets = 1 << set.length; // 2^n\n  let subsets = [];\n\n  for (let bitSet = numSubsets - 1; bitSet >= 0; --bitSet) {\n    let subset = [];\n    // Iterate through the bitSet. Checking each bit.\n    for (let j = 0; j < set.length; ++j) {\n      // If the bit at position j is turned on in the bit set, push element j.\n      if ((bitSet & (1 << j)) > 0) subset.push({ ...set[j] });\n    }\n    if (subset.length > 0) subsets.push(subset); // Push subset into list of all subsets.\n  }\n  return subsets;\n};\n\n/**\n * Determines whether a given input falls within the range of the given min and max.\n * @param {Number} input\n * @param {Number} min\n * @param {Number} max\n */\nconst withinRange = (input, min, max) => input >= min && input <= max;\n\n/**\n * Multiplies the quantity value of each plate object in the given array by the\n * given modifier value.\n * @param {Object[]} plateObjs Array of plate objects.\n * @param {Number} plateObjs[].value The weight value of the plate.\n * @param {String} plateObjs[].color The color of the plate.\n * @param {Number} plateObjs[].quantity The quantity available of the plate.\n */\nconst modQuantity = (plateObjs, modifier) => {\n  return plateObjs\n    .filter(({ quantity }) => quantity > 0)\n    .map(plate => {\n      const { value, backgroundColor, color, quantity } = plate;\n      return { value, backgroundColor, color, quantity: quantity * modifier };\n    });\n};\n\nexport { DEFAULT_INV_PLATES, INV_MAX_PLATES, modQuantity, withinRange, calculatePlates };\n","import React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport localStorage from 'local-storage';\nimport NavBar from './components/navBar';\nimport Inventory from './components/inventory';\nimport NotFound from './components/common/notFound';\nimport Loader from './components/loader';\nimport SetsCalculator from './components/setsCalculator';\nimport About from './components/about';\nimport { roundToNearestStep, calcRampUpReps } from './utils/rampUps';\nimport { getHexColor } from './utils/getHexColor';\nimport { DEFAULT_INV_PLATES, INV_MAX_PLATES, modQuantity, withinRange, calculatePlates } from './utils/plates';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './css/App.css';\nimport './css/utils.css';\nimport './css/toastify.css';\n\nclass App extends Component {\n   state = {\n      barbell: { lbs: 45, kg: 20 },\n      calcdPlates: [],\n      calcdLoad: -1,\n      prevCalcdLoad: -1,\n\n      workWeight: -1,\n      workNumReps: -1,\n      warmUpSets: [/* {percentage, weight, numReps}, ... */],\n      prevWarmUpSets: []\n   };\n\n   constructor(props) {\n      super(props);\n\n      let defaultAvailPlates = {\n         lbs: [\n            { value: 45, quantity: DEFAULT_INV_PLATES },\n            { value: 35, quantity: 0 },\n            { value: 25, quantity: DEFAULT_INV_PLATES },\n            { value: 15, quantity: 0 },\n            { value: 10, quantity: DEFAULT_INV_PLATES },\n            { value: 5, quantity: DEFAULT_INV_PLATES },\n            { value: 2.5, quantity: DEFAULT_INV_PLATES },\n            { value: 1.25, quantity: 0 },\n            { value: 1, quantity: 2 },\n            { value: 0.5, quantity: 2 },\n            { value: 0.25, quantity: 2 }\n         ],\n         kg: [\n            { value: 50, quantity: 0 },\n            { value: 25, quantity: DEFAULT_INV_PLATES },\n            { value: 20, quantity: DEFAULT_INV_PLATES },\n            { value: 15, quantity: 0 },\n            { value: 10, quantity: DEFAULT_INV_PLATES },\n            { value: 5, quantity: DEFAULT_INV_PLATES },\n            { value: 2.5, quantity: DEFAULT_INV_PLATES },\n            { value: 1.25, quantity: 2 },\n            { value: 1, quantity: 0 },\n            { value: 0.75, quantity: 0 },\n            { value: 0.5, quantity: 2 },\n            { value: 0.25, quantity: 2 }\n         ]\n      };\n      // Give plates color.\n      ['lbs', 'kg'].forEach(unit => {\n         defaultAvailPlates[unit] = defaultAvailPlates[unit].map(plate => {\n            const [ backgroundColor, color ] = getHexColor(unit, plate.value);\n            return { ...plate, backgroundColor, color };\n         });\n      });\n      const defaultPercentages = [\n         { value: 0.1, on: false },\n         { value: 0.2, on: false },\n         { value: 0.3, on: false },\n         { value: 0.4, on: false },\n         { value: 0.5, on: true },\n         { value: 0.6, on: true },\n         { value: 0.7, on: true },\n         { value: 0.8, on: true },\n         { value: 0.9, on: true },\n         { value: 1.1, on: true },\n         { value: 1.2, on: false },\n         { value: 1.3, on: false },\n         { value: 1.4, on: false },\n         { value: 1.5, on: false }\n      ];\n\n      this.state.unit = localStorage.get('unit') || 'kg';\n      this.state.percentages = /*localStorage.get('percentages') || */defaultPercentages;\n      this.state.availPlates = /*localStorage.get('availPlates') || */defaultAvailPlates;\n   }\n\n   render() {\n      const { unit, barbell, availPlates, calcdPlates, calcdLoad, prevCalcdLoad, workWeight, workNumReps, warmUpSets, percentages } = this.state;\n      const loaderProps = { unit, barbellWeight: barbell[unit], calcdPlates, calcdLoad, prevCalcdLoad, onSubmit: this.handleLoadSubmit, resetPrevLoad: this.resetPrevLoad };\n      const invProps = { unit, barbell, availPlates, onPlateGroupClick: this.handlePlateGroupClick, onUnitClick: this.handleUnitClick, onClear: this.handlePlateGroupsClear };\n      const setsCalcProps = { unit, workWeight, workNumReps, warmUpSets, onSubmit: this.handleWorkSetSubmit, onLoad: this.handleLoad, percentages, togglePercentage: this.handleTogglePercentage };\n      const toastProps = { /* limit: 1, */ autoClose: 2000, hideProgressBar: true, pauseOnFocusLoss: false, draggable: false, pauseOnHover: false, newestOnTop: true };\n      return (\n         <>\n            <div className=\"container\" style={{ paddingBottom: '70px' }}>\n               <ToastContainer {...toastProps} />\n               <Switch>\n                  <Route path=\"/home\" render={() => <Loader {...loaderProps} />} />\n                  <Route path=\"/inventory\" render={() => <Inventory {...invProps} />} />\n                  <Route path=\"/warmup\" render={() => <SetsCalculator {...setsCalcProps} />} />\n                  <Route path=\"/about\" component={About}></Route>\n                  <Route path=\"/not-found\" component={NotFound} />\n                  <Redirect from=\"/\" exact to=\"/home\" />\n                  <Redirect to=\"/not-found\" />\n               </Switch>\n            </div>\n            <NavBar />\n         </>\n      );\n   }\n\n   handleUnitClick = e => {\n      let { unit } = this.state;\n      if (unit === 'lbs') unit = 'kg';\n      else unit = 'lbs';\n      this.setState({ unit, calcdPlates: [], calcdLoad: -1, prevCalcdLoad: -1, workWeight: -1, warmUpSets: [] });\n      e.currentTarget.classList.add('animate-wiggle');\n      e.currentTarget.classList.remove('animate-wiggle');\n      localStorage.set('unit', unit);\n   };\n\n   handlePlateGroupClick = value => {\n      const { unit } = this.state;\n      const availPlates = { ...this.state.availPlates };\n      const i = availPlates[unit].findIndex(element => element.value === value);\n\n      const quant = availPlates[unit][i].quantity;\n      availPlates[unit][i].quantity = quant === 0 ? INV_MAX_PLATES : quant - 2;\n\n      this.setState({ availPlates, calcdPlates: [], calcdLoad: -1, prevCalcdLoad: -1 });\n      localStorage.set('availPlates', availPlates);\n   };\n\n   handleLoadSubmit = e => {\n      e.preventDefault();\n      e.currentTarget.firstElementChild.firstElementChild.blur(); // Blur in order to hide keyboard on mobile.\n      this.handleLoad(e.currentTarget.loadInput.value);\n      // e.currentTarget.loadInput.value = '';\n   };\n\n   handleLoad = load => {\n      const { unit } = this.state;\n      const barLoad = this.state.barbell[unit];\n      let avlPltsOneSide = modQuantity([...this.state.availPlates[unit]], 0.5);\n      const prevCalcdLoad = this.state.calcdLoad; // Set prevLoad to curLoad\n      const maxLoad = barLoad + 2 * avlPltsOneSide.reduce((acc, cur) => acc + cur.value * cur.quantity, 0);\n\n      if (!withinRange(load, barLoad, maxLoad)) {\n         this.setState({ calcdPlates: [], calcdLoad: -1, prevCalcdLoad });\n         if (load < barLoad) toast.error(\"That's not even the bar!\");\n         else if (load > maxLoad) toast.error('Exceeded maximum allowed by inventory!');\n      } else {\n         const { success, warn, calcdLoad, calcdPlates, roundOff } = calculatePlates(load, barLoad, avlPltsOneSide);\n\n         if (warn === 'justbar') toast.success('Just the bar!');\n         else if (warn === 'roundoff') toast.warn(`Inventory limitation—Load rounded ${roundOff.up ? 'up' : 'down'} by ${roundOff.amount} ${unit}.`);\n         else if (warn === 'notEnoughRoom') toast.error('Too many plates to fit on barbell!');\n\n         if (success) this.setState({ calcdPlates, calcdLoad, prevCalcdLoad });\n         else this.setState({ calcdPlates: [], calcdLoad: -1, prevCalcdLoad });\n      }\n   };\n\n   handleWorkSetSubmit = e => {\n      e.preventDefault();\n      // Blur all inputs.\n      e.currentTarget.firstElementChild.querySelectorAll('input').forEach(elem => { elem.blur(); });\n      const { loadInput, numRepsInput } = e.currentTarget;\n      this.updateWarmUpSets(loadInput.value, numRepsInput.value);\n   };\n\n   updateWarmUpSets = (workWeight, workNumReps) => {\n      if (workWeight && workNumReps) {\n         const prevWarmUpSets = this.state.warmUpSets;\n         const warmUpSets = [];\n         const { percentages, unit, availPlates } = this.state;\n         const lightestPlateAvail = availPlates[unit].filter(plate => plate.quantity > 0).map(plate => plate.value).reduce((prev, cur) => (prev < cur ? prev : cur));\n         percentages.forEach(percentage => {\n            const { value, on } = percentage;\n            if (on) {\n               const weight = roundToNearestStep(workWeight * value, lightestPlateAvail * 2);\n               const numReps = calcRampUpReps(value, workNumReps);\n               warmUpSets.push({ percentage: value, weight, numReps });\n            }\n         });\n         this.setState({ workWeight, workNumReps, warmUpSets, prevWarmUpSets });\n      } else this.setState({ workWeight: -1, workNumReps: -1, warmUpSets: [], prevWarmUpSets: [] });\n   };\n\n   handlePlateGroupsClear = () => {\n      const { unit } = this.state;\n      let availPlates = { ...this.state.availPlates };\n      availPlates[unit] = availPlates[unit].map(({ value, backgroundColor, color }) => ({ value, backgroundColor, color, quantity: 0 }));\n      this.setState({ availPlates });\n      localStorage.set('availPlates', availPlates);\n   };\n\n   resetPrevLoad = () => {\n      this.setState({ prevCalcdLoad: -1 });\n   };\n\n   handleTogglePercentage = index => {\n      const percentages = [...this.state.percentages];\n      percentages[index].on = !percentages[index].on;\n      this.setState({ percentages });\n      localStorage.set('percentages', percentages);\n\n      // Update in order to trigger a re-render of the warm up sets.\n      const { workWeight, workNumReps } = this.state;\n      if (workWeight > 0 && workNumReps > 0) this.updateWarmUpSets(workWeight, workNumReps);\n   };\n}\n\nexport default App;\n","const roundToNearestStepHelper = (value, step) => {\n  const remainder = value % step;\n  const dividend = value - remainder;\n  return remainder >= step / 2 ? dividend + step : dividend;\n};\n\nconst roundToNearestStep = (value, step) => Math.round(roundToNearestStepHelper(value, step));\n\nconst calcRampUpReps = (percentage, workingNumSets) => {\n  const numReps = Math.round(workingNumSets * (2 - 4 * (percentage - 0.5)));\n  return numReps > 0 ? numReps : 1;\n};\n\nexport { roundToNearestStep, calcRampUpReps };\n","export const getHexColor = (unit, weight) => {\n   const unit_weight_hexcolor_map = {\n      'kg': {\n         '50': '#030303',\n         '25': '#D0535A',\n         '20': '#497BAE',\n         '15': '#E4B911',\n         '10': '#00A71D',\n         '5': '#E6E8E8',\n         '2.5': '#050303',\n         '1.25': '#C5C7C9',\n         '1': '#C5C7C9',\n         '0.75': '#C5C7C9',\n         '0.5': '#C5C7C9',\n         '0.25': '#C5C7C9'\n      },\n      'lbs': {\n         '100': '#030303',\n         '55': '#D0535A',\n         '45': '#497BAE',\n         '35': '#E4B911',\n         '25': '#00A71D',\n         '10': '#E6E8E8',\n         '5': '#050303',\n         '2.5': '#C5C7C9',\n         '1.25': '#C5C7C9',\n         '1': '#C5C7C9',\n         '0.75': '#C5C7C9',\n         '0.5': '#C5C7C9',\n         '0.25': '#C5C7C9'\n      }\n   };\n   const bgColors_w_black_letters = [\n      '#E6E8E8',\n      '#E4B911',\n      '#C5C7C9'\n   ];\n\n   for (const lkp_weight in unit_weight_hexcolor_map[unit]) {\n      if (weight === Number(lkp_weight)) {\n         // console.log({weight, lkp_weight: Number(lkp_weight)});\n         //console.log(unit_weight_hexcolor_map[unit][lkp_weight]);\n         const backgroundColor = unit_weight_hexcolor_map[unit][lkp_weight];\n         const color = bgColors_w_black_letters.includes(backgroundColor)? 'black' : 'white';\n         return [backgroundColor, color];\n      }\n   }\n   if (weight % 6 === 0) return ['black', 'white'];\n   if (weight % 5 === 0) return ['yellow', 'black'];\n   if (weight % 4 === 0) return ['red', 'white'];\n   if (weight % 3 === 0) return ['purple', 'white'];\n   if (weight % 2 === 0) return ['green', 'white'];\n   return ['red', 'black'];\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}